#!/usr/bin/env node
const debug = require('debug')('millegrilles:maitrecomptes:www')
const express = require('express')

const socketApp = require('../models/appSocketIo')
// const amqpdao = require('../models/amqpdao')
// const server4 = require('@dugrema/millegrilles.common/lib/server4')
const { server5 } = require('@dugrema/millegrilles.nodejs')
const {initialiser: initialiserMillegrilles} = require('../routes/millegrilles')
const { TopologieDao } = require('../models/topologieDao')
const comptesUsagers = require('@dugrema/millegrilles.common/lib/dao/comptesUsagersDao')
const { MaitreClesDao }  = require('../models/maitreClesDao')
const { init: initCallbacks, enregistrerCallbacks } = require('../models/mqEventsHandler')

const _hostname = process.env.HOST
var _idmg

if(!_hostname) {
  console.error("Il faut fournir la variable d'environnement HOST")
  return process.exit(-1)
}

async function init() {

  // Initialiser server et routes
  const optsServer5 = {
    pathApp: '/millegrilles',
    cookiePath: '/',                // Permet au cookie d'etre transmis pour toutes les sous-apps
    noPreAuth: true,                // Aucune verification de session/autorisation automatique - va etre faite dans l'application
    // upgradeProtegeComplet: true,    // Pas de raccourci avec certificat pour upgrade
    maxAge: 12 * (60 * 60 * 1000),  // session expire apres 12 heures (en millisecs)
    verifierAutorisation, 
    exchange: '2.prive',
  }

  const app = express()
  // const {server, socketIo, amqpdao: amqpdaoInst} = await server4(
  //   app, socketApp.configurerEvenements, optsServer4)
  const {server, socketIo, amqpdao: amqpdaoInst} = await server5(app, socketApp.configurerEvenements, optsServer5)

  _idmg = amqpdaoInst.pki.idmg
  console.info("****************\nDemarrage serveur maitre des comptes (/millegrilles)")
  console.info("Hostname %s\nIDMG     %s", _hostname, _idmg)
  socketApp.init(_hostname, _idmg)
  console.info("****************")

  initCallbacks(amqpdaoInst, socketIo)
  enregistrerCallbacks()

  // Inserer les routes apres l'initialisation, permet d'avoir le middleware
  // attache avant (app.use comme le logging morgan, injection amqpdao, etc.)
  const {middlewareExpress, middlewareSocket, extraireUsager} = preparerDaos(amqpdaoInst)
  socketIo.use(middlewareSocket)

  const routeMillegrilles = express.Router()
  app.use('/millegrilles', routeMillegrilles)

  routeMillegrilles.use(middlewareExpress)
  routeMillegrilles.use(initialiserMillegrilles(_hostname, amqpdaoInst, extraireUsager))
  routeMillegrilles.use(express.static('static/'))
}

function preparerDaos(amqpdaoInst) {

  const topologieDao = new TopologieDao(amqpdaoInst)
  const maitreClesDao = new MaitreClesDao(amqpdaoInst)
  const {extraireUsager, comptesUsagersDao} = comptesUsagers.init(amqpdaoInst)

  const middlewareExpress = (req, res, next) => {
    req.topologieDao = topologieDao
    req.maitreClesDao = maitreClesDao
    // req.comptesUsagersDao = comptesUsagersDao  // Deja injecte par server4
    next()
  }

  const middlewareSocket = (socket, next) => {
    socket.topologieDao = topologieDao
    socket.maitreClesDao = maitreClesDao
    // socket.comptesUsagersDao = comptesUsagersDao  // Deja injecte par server4
    next()
  }

  return {middlewareExpress, middlewareSocket, extraireUsager}
}

function verifierAutorisation(socket, securite, certificatForge) {

  let prive = false, protege = false

  const extensions = extraireExtensionsMillegrille(certificatForge)

  if(['proprietaire', 'delegue'].includes(extensions.delegationGlobale)) {
      // Deleguation globale donne tous les acces
      debug("Usager proprietaire, acces 3.protege OK")
      prive = true
      protege = true
  } else if(securite === '3.protege') {
      const roles = extensions.roles || []
      if(roles.includes('compte_prive')) {
          debug("Usager prive, acces 2.prive OK")
          prive = true
      }
  }
  
  return {prive, protege}
}

// Demarrer le serveur
init()
  .then(_=>{
    console.info("Serveur pret")
  })
  .catch(err=>{
    console.error("*** ERREUR Demarrage ***")
    console.error(err)

    // Arreter le serveur
    process.exit(2)
  })
