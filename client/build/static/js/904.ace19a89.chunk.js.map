{"version":3,"file":"static/js/904.ace19a89.chunk.js","mappings":"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","sources":["ChargerCleMillegrille.js","ActiverDelegation.js"],"sourcesContent":["import {useState, useCallback, useEffect} from 'react'\nimport Dropzone from 'react-dropzone'\n\nimport Form from 'react-bootstrap/Form'\n\nimport { chargerPemClePriveeEd25519, publicKeyFromPrivateKey } from '@dugrema/millegrilles.utiljs/src/certificats'\n\nimport { SignateurMessageEd25519, hacherMessage } from '@dugrema/millegrilles.reactjs/src/formatteurMessage'\n\nfunction ChargerCleMillegrille(props) {\n\n    const {setCleMillegrille, erreurCb} = props\n\n    const [cleChiffree, setCleChiffree] = useState('')\n    const [motdepasse, setMotdepasse] = useState('')\n\n    const changerMotdepasseCb = useCallback(event=>setMotdepasse(event.currentTarget.value), [setMotdepasse])\n\n    useEffect(()=>{\n        if(cleChiffree && motdepasse) {\n            try {\n                const cleMillegrille = chargerPemClePriveeEd25519(cleChiffree, {password: motdepasse, pemout: true})\n                console.debug(\"Cle privee millegrille extraite %O\", cleMillegrille)\n                const publicKey = publicKeyFromPrivateKey(cleMillegrille.privateKeyBytes)\n                setCleMillegrille({...cleMillegrille, publicKey})\n            } catch(err) {\n                erreurCb(err)\n            }\n        }\n    }, [cleChiffree, motdepasse, setCleMillegrille, erreurCb])\n\n    return (\n        <ChargerCleFichier \n            cleChiffree={cleChiffree}\n            setCleChiffree={setCleChiffree}\n            motdepasse={motdepasse}\n            setMotdepasse={changerMotdepasseCb} \n            erreurCb={erreurCb} />\n    )\n}\n\nexport default ChargerCleMillegrille\n\nfunction ChargerCleFichier(props) {\n\n    const {motdepasse, setMotdepasse, cleChiffree, setCleChiffree, erreurCb} = props\n\n    const recevoirCleCb = useCallback(acceptedFiles=>{\n        recevoirFichierCle(acceptedFiles)\n            .then(cle=>setCleChiffree(cle))\n            .catch(err=>erreurCb(err, 'Erreur chargement cle'))\n    }, [setCleChiffree, erreurCb])\n\n    return (\n        <>\n            <Form.Group controlId=\"formMotdepasse\">\n                <Form.Label>Mot de passe de la cle de MilleGrille</Form.Label>\n                <Form.Control\n                    type=\"password\"\n                    name=\"motdepasse\"\n                    value={motdepasse}\n                    autoComplete=\"false\"\n                    onChange={setMotdepasse}\n                    placeholder=\"AAAA-bbbb-1111-2222\" />\n            </Form.Group>\n\n            <p></p>\n\n            <p>Cliquer sur le bouton suivant pour telecharger le fichier avec la cle de millegrille</p>\n            <Dropzone onDrop={recevoirCleCb}>\n              {({getRootProps, getInputProps}) => (\n                <span className=\"uploadIcon btn btn-secondary\">\n                  <span {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <span className=\"fa fa-upload fa-2x\"/>\n                  </span>\n                </span>\n              )}\n            </Dropzone>\n            {cleChiffree?<span>Fichier charge</span>:''}\n        </>\n    )    \n}\n\nasync function recevoirFichierCle(acceptedFiles) {\n    const resultats = await traiterUploads(acceptedFiles)\n    console.debug(\"Resultats upload : %O\", resultats)\n\n    // Format fichier JSON : {idmg, racine: {cleChiffree, certificat}}\n    let cleChiffree = null\n    if(resultats.length > 0) {\n        const resultat = resultats[0]\n        cleChiffree = resultat.racine.cleChiffree\n        return cleChiffree\n    }\n}\n\nasync function traiterUploads(acceptedFiles) {\n    const resultats = await Promise.all(acceptedFiles.map(async file =>{\n        if( file.type === 'application/json' ) {\n            var reader = new FileReader()\n            const fichierCharge = await new Promise((resolve, reject)=>{\n                reader.onload = () => {\n                    var buffer = reader.result\n                    const contenuFichier =  String.fromCharCode.apply(null, new Uint8Array(buffer))\n                    resolve({contenuFichier})\n                }\n                reader.onerror = err => reject(err)\n                reader.readAsArrayBuffer(file)\n            })\n    \n            console.debug(fichierCharge)\n            const contenuJson = JSON.parse(fichierCharge.contenuFichier)\n            return contenuJson\n        }\n    }))\n    return resultats\n}\n\nexport async function authentiferCleMillegrille(nomUsager, cle, opts) {\n    opts = opts || {}\n    const challenge = opts.challenge,\n          userId = opts.userId\n    console.debug(\"authentiferCleMillegrille : %O\", cle)\n\n    const { activerDelegation } = opts\n\n    // const connexion = workers.connexion\n    // Recuperer le challenge de certificat courant pour l'usager\n    // const infoUsager = await connexion.getInfoUsager(nomUsager)\n\n    // console.debug(\"authentiferCleMillegrille Information usager recue : %O\", infoUsager)\n    // const challengeCertificat = infoUsager.challengeCertificat\n\n    const reponseCertificat = {\n      challenge,\n      nomUsager,\n    }\n    if(userId) reponseCertificat.userId = userId\n    if(activerDelegation) reponseCertificat.activerDelegation = true\n  \n    // await connexionWorker.chargerCleMillegrille(cles)\n    // console.debug(\"Cle de millegrille chargee, signer le message : %O\", reponseCertificat)\n  \n    // const signature = await connexionWorker.signerMessageCleMillegrille(reponseCertificat)\n    console.debug(\"signerMessage: signature avec cle de millegrille : %O\", cle)\n  \n    const pubkey = Buffer.from(cle.publicKey.publicKeyBytes).toString('hex')\n\n    const estampille = Math.trunc(new Date()/1000)\n    const contenu = JSON.stringify(reponseCertificat)\n    const reponseHachage = [\n        pubkey,\n        estampille,\n        0,  // kind\n        contenu,\n    ]\n    const hachage = await hacherMessage(reponseHachage)\n    const reponseSignee = {\n        id: hachage,\n        pubkey,\n        estampille,\n        kind: 0,\n        contenu,\n    }\n\n    const signateur = new SignateurMessageEd25519(cle)\n    console.debug(\"authentiferCleMillegrille Hachage message \", hachage)\n    const signature = await signateur.signer(hachage)\n\n    reponseSignee['sig'] = signature\n\n    return reponseSignee\n}\n","import { useState, useEffect } from 'react'\nimport Alert from 'react-bootstrap/Alert'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport { useTranslation } from 'react-i18next'\n\nimport ChargerCleMillegrille, {authentiferCleMillegrille} from './ChargerCleMillegrille'\nimport {getUserIdFromCertificat} from './comptesUtil'\n\nimport useWorkers, {useUsagerDb} from './WorkerContext'\nimport { BoutonMajCertificatWebauthn } from './WebAuthn'\n\nfunction SectionActiverDelegation(props) {\n\n    useEffect(()=>console.info(\"SectionActiverDelegation PROPPIES \", props), [props])\n\n    const {\n        confirmationCb, \n        erreurCb, fermer\n    } = props\n\n    const { t } = useTranslation()\n    const workers = useWorkers(),\n          usagerDb = useUsagerDb()[0]\n\n    const [cleMillegrille, setCleMillegrille] = useState('')\n    const [resultat, setResultat] = useState('')\n    const [challenge, setChallenge] = useState('')\n\n    useEffect(()=>{\n        if(!cleMillegrille || !challenge) return\n        if(resultat === true) return   // Eviter generer certificat plusieurs fois\n        activerDelegation(workers, usagerDb, challenge, cleMillegrille)\n            .then(()=>setResultat(true))\n            .then(()=>{\n                confirmationCb('Delegation completee avec succes. Le certificat de compte proprietaire est maintenant installe.')\n                fermer()\n            })\n            .catch(erreurCb)\n    }, [workers, resultat, usagerDb, setResultat, challenge, cleMillegrille, confirmationCb, erreurCb, fermer])\n\n    // Charger un nouveau challenge de delegation\n    useEffect(()=>{\n        const hostname = window.location.hostname\n        workers.connexion.genererChallenge({\n            hostname, delegation: true\n        })\n            .then(reponseChallenge=>{\n                console.debug(\"Recu challenge de delegation : \", reponseChallenge)\n                setChallenge(reponseChallenge.delegation_challenge)\n            })\n            .catch(err=>{\n                erreurCb(err, 'Erreur reception challenge de delegation du serveur')\n                fermer()\n            })\n    }, [workers, usagerDb, setChallenge, erreurCb, fermer])\n\n    return (\n        <Row>\n            <Col xs={0} sm={1} md={2} lg={3}></Col>\n            <Col xs={12} sm={10} md={8} lg={6}>\n                <Row>\n                    <Col xs={10} md={11}>\n                        <h2>{t('ActiverDelegation.titre')}</h2>\n                    </Col>\n                    <Col xs={2} md={1} className=\"bouton\">\n                        <Button onClick={fermer} variant=\"secondary\"><i className='fa fa-remove'/></Button>\n                    </Col>\n                </Row>\n\n                <p>{t('ActiverDelegation.description')}</p>\n\n                <ChargerCleMillegrille \n                    setCleMillegrille={setCleMillegrille}\n                    erreurCb={erreurCb} />\n\n                <p></p>\n\n            </Col>\n        </Row>\n    )\n}\n\nexport default SectionActiverDelegation\n\nasync function activerDelegation(workers, usagerDbLocal, challenge, cleMillegrille) {\n\n    const { connexion } = workers\n    const { nomUsager, certificat } = usagerDbLocal\n\n    const userId = getUserIdFromCertificat(certificat.join(''))\n\n    const preuve = await authentiferCleMillegrille(nomUsager, cleMillegrille, {challenge, userId, activerDelegation: true})\n    console.debug(\"Preuve signee : %O\", preuve)\n\n    const commande = {\n        confirmation: preuve,\n        userId,\n        nomUsager,\n        hostname: window.location.hostname,\n    }\n    console.debug(\"Commande activer delegation : %O\", commande)\n\n    const reponse = await connexion.activerDelegationParCleMillegrille(commande)\n    if(reponse.err) throw new Error(reponse.err)\n\n    return reponse\n}\n"],"names":["props","setCleMillegrille","erreurCb","useState","cleChiffree","setCleChiffree","motdepasse","setMotdepasse","changerMotdepasseCb","useCallback","event","currentTarget","value","useEffect","cleMillegrille","chargerPemClePriveeEd25519","password","pemout","console","debug","publicKey","publicKeyFromPrivateKey","privateKeyBytes","err","ChargerCleFichier","recevoirCleCb","acceptedFiles","recevoirFichierCle","then","cle","catch","Form","Group","controlId","Label","Control","type","name","autoComplete","onChange","placeholder","onDrop","getRootProps","getInputProps","className","traiterUploads","resultats","length","resultat","racine","Promise","all","map","file","reader","FileReader","resolve","reject","onload","buffer","result","contenuFichier","String","fromCharCode","apply","Uint8Array","onerror","readAsArrayBuffer","fichierCharge","contenuJson","JSON","parse","authentiferCleMillegrille","nomUsager","opts","challenge","userId","activerDelegation","reponseCertificat","pubkey","Buffer","from","publicKeyBytes","toString","estampille","Math","trunc","Date","contenu","stringify","reponseHachage","hacherMessage","hachage","reponseSignee","id","kind","signateur","SignateurMessageEd25519","signer","signature","info","confirmationCb","fermer","t","useTranslation","workers","useWorkers","usagerDb","useUsagerDb","setResultat","setChallenge","hostname","window","location","connexion","genererChallenge","delegation","reponseChallenge","delegation_challenge","Row","Col","xs","sm","md","lg","Button","onClick","variant","usagerDbLocal","certificat","getUserIdFromCertificat","join","preuve","commande","confirmation","activerDelegationParCleMillegrille","reponse","Error"],"sourceRoot":""}