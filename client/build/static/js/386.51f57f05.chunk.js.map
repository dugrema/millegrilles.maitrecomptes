{"version":3,"file":"static/js/386.51f57f05.chunk.js","mappings":"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","sources":["QrCodes.js","PreAuthentifier.js"],"sourcesContent":["import {useState, useEffect} from 'react'\nimport QRCode from 'qrcode.react'\n\nexport function RenderCsr(props) {\n\n    const { value } = props\n\n    const size = props.size || 300,\n          className = props.className || 'qr-code-background'\n\n    const [csrStringBuffer, setCsrStringBuffer] = useState('')\n  \n    useEffect(_=>{\n        if(value) {\n            const csrStringBuffer = preparerCsr(value)\n            setCsrStringBuffer(csrStringBuffer)\n        }\n    }, [value])\n  \n    if(!csrStringBuffer) return <p>Chargement en cours</p>\n  \n    return (\n        <QRCode \n            className={className}\n            value={csrStringBuffer}\n            size={size} />\n    )\n  \n}\n\nfunction preparerCsr(csrPem) {\n    // Convertir le PEM en bytes pour mettre dans un code QR\n    const regEx = /\\n?-{5}[A-Z ]+-{5}\\n?/g\n    const pemBase64 = csrPem.replaceAll(regEx, '')\n  \n    const csrAb = new Uint8Array(Buffer.from(pemBase64, 'base64'))\n    const csrStringBuffer = String.fromCharCode.apply(null, csrAb)\n  \n    return csrStringBuffer\n}\n  \n","import axios from 'axios'\nimport {useEffect, useState, useCallback, useMemo, useRef} from 'react'\nimport {proxy as comlinkProxy} from 'comlink'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport Alert from 'react-bootstrap/Alert'\nimport Overlay from 'react-bootstrap/Overlay'\n\nimport { Trans, useTranslation } from 'react-i18next'\n\nimport { MESSAGE_KINDS } from '@dugrema/millegrilles.utiljs/src/constantes'\nimport { BoutonActif, usagerDao } from '@dugrema/millegrilles.reactjs'\n\nimport useWorkers, {\n    useEtatConnexion, useFormatteurPret, useEtatPret, \n    useEtatSessionActive, useSetEtatSessionActive, useSetUsager,\n    useUsagerDb, useUsagerWebAuth\n} from './WorkerContext'\n\nimport { BoutonAuthentifierWebauthn } from './WebAuthn'\nimport { RenderCsr } from './QrCodes'\n\nimport { sauvegarderCertificatPem, initialiserCompteUsager, preparerUsager, chargerUsager } from './comptesUtil'\n\nfunction PreAuthentifier(props) {\n    const { erreurCb } = props\n\n    return (\n        <Row>\n            <Col xs={0} sm={1} md={2} lg={3}></Col>\n            <Col xs={12} sm={10} md={8} lg={6}>\n                <p></p>\n                <SectionAuthentification\n                    erreurCb={erreurCb}\n                />\n            </Col>\n        </Row>\n    )\n}\n\nexport default PreAuthentifier\n\nfunction SectionAuthentification(props) {\n    const { erreurCb } = props\n\n    const workers = useWorkers()\n\n    const [usagerDb, setUsagerDb] = useUsagerDb()\n    const [usagerWebAuth, setUsagerWebAuth] = useUsagerWebAuth()\n\n    const [nomUsager, setNomUsager] = useState(window.localStorage.getItem('usager')||'')\n    const [dureeSession, setDureeSession] = useState(window.localStorage.getItem('dureeSession')||'86400')\n\n    // Flags\n    const [nouvelUsager, setNouvelUsager] = useState(false)  // Flag pour bouton nouvel usager\n    const [authentifier, setAuthentifier] = useState(false)  // Flag pour ecran inscrire/authentifier\n    const [attente, setAttente] = useState(false)\n    const [compteRecovery, setCompteRecovery] = useState(false)  // Mode pour utiliser un code pour associer compte\n\n    const reloadCompteUsager = useCallback(()=>{\n        if(nomUsager) {\n            setUsagerDb('')\n            setNomUsager('')\n            setAuthentifier(true)\n            setCompteRecovery(false)\n            setNomUsager(nomUsager)\n        }\n    }, [nomUsager, setNomUsager, setAuthentifier, setCompteRecovery, setUsagerDb])\n\n    // Load/re-load usagerDbLocal et usagerWebAuth sur changement de nomUsager\n    useEffect(()=>{\n        if(!nomUsager) return\n        setUsagerWebAuth('')\n        if(!usagerDb || usagerDb.nomUsager !== nomUsager) {\n            initialiserCompteUsager(nomUsager) \n                .then(async usagerLocal=>{\n                    setUsagerDb(usagerLocal)\n                    console.debug(\"SectionAuthentification usagerLocal : %O\", usagerLocal)\n                    const requete = usagerLocal.requete || {},\n                          fingerprintPk = requete.fingerprintPk,\n                          fingerprintCourant = usagerLocal.fingerprintPk\n\n                    if(usagerLocal.certificat && usagerLocal.clePriveePem) {\n                        // Initialiser le formatteur de certificat - va permettre auth via activation\n                        await chargerFormatteurCertificat(workers, usagerLocal)\n                    } else {\n                        // Desactiver formatteur de certificat\n                        await chargerFormatteurCertificat(workers, {})\n                    }\n\n                    const reponseUsagerWebAuth = await chargerUsager(\n                        nomUsager, fingerprintPk, fingerprintCourant, {genererChallenge: true})\n                    console.debug(\"SectionAuthentification Charge compte usager : %O\", reponseUsagerWebAuth)\n\n                    // Recuperer nouveau certificat\n                    if(usagerLocal.requete && reponseUsagerWebAuth.infoUsager && reponseUsagerWebAuth.infoUsager.certificat) {\n                        console.info(\"Nouveau certificat recu : %O\", reponseUsagerWebAuth.infoUsager)\n                        // TODO : ajouter delegations_date, delegations_versions a la reponse webauth\n                        const reponse = {...reponseUsagerWebAuth.infoUsager, nomUsager}\n                        const usagerLocalMaj = await sauvegarderUsagerMaj(workers, reponse)\n                        // Reload le formatteur de messages avec le nouveau certificat\n                        await chargerFormatteurCertificat(workers, usagerLocalMaj)\n                    }\n\n                    setUsagerWebAuth(reponseUsagerWebAuth)\n                })\n                .catch(erreurCb)\n        }\n    }, [workers, nomUsager, usagerDb, setUsagerDb, setUsagerWebAuth, erreurCb])\n\n    if(compteRecovery) {\n        // Etape = CompteRecovery\n        return (\n            <CompteRecovery \n                setAuthentifier={setAuthentifier}\n                setCompteRecovery={setCompteRecovery}\n                reloadCompteUsager={reloadCompteUsager}\n                erreurCb={erreurCb}\n                />\n        )\n    }\n\n    if(authentifier && usagerWebAuth) {\n        console.debug(\"Authentifier avec : %O\", usagerWebAuth)\n\n        if(usagerWebAuth.infoUsager) {\n            // C'est un usager existant, on poursuit l'authentification avec webauthn\n            return (\n                <Authentifier \n                    nouvelUsager={nouvelUsager}\n                    setAttente={setAttente}\n                    nomUsager={nomUsager}\n                    dureeSession={dureeSession}\n                    setAuthentifier={setAuthentifier}\n                    setCompteRecovery={setCompteRecovery}\n                    erreurCb={erreurCb}\n                    />\n            )\n\n        } else {\n            // Nouvel usager\n            return (\n                <InscrireUsager \n                    setAuthentifier={setAuthentifier}\n                    nomUsager={nomUsager}\n                    erreurCb={erreurCb}\n                    />\n            )\n        }\n\n    }\n\n    // Ecran de saisie du nom usager\n    return (\n        <FormSelectionnerUsager \n            nomUsager={nomUsager}\n            setNomUsager={setNomUsager}\n            nouvelUsager={nouvelUsager}\n            setNouvelUsager={setNouvelUsager}\n            attente={attente}\n            setAttente={setAttente}\n            setAuthentifier={setAuthentifier}\n            setCompteRecovery={setCompteRecovery}\n            dureeSession={dureeSession}\n            setDureeSession={setDureeSession}\n            erreurCb={erreurCb}\n            />\n    )\n\n    \n//     const { erreurCb } = props\n\n//     const workers = useWorkers(),\n//           etatConnexion = useEtatConnexion(),\n//           setUsager = useSetUsager()\n\n//     // Information du compte usager sur le serveur, challenges (webauthn/certificat)\n//     const [compteUsagerServeur, setCompteUsagerServeur] = useState('')\n\n//     // Information usager temporaire pour auth\n//     const [usagerDbLocal, setUsagerDbLocal] = useState('')          // Info db locale pre-auth pour nomUsager\n\n//     const setUsagerDbLocalCb = useCallback(usager=>{\n//         setUsagerDbLocal(usager)\n//         setUsager(usager)\n//     }, [setUsagerDbLocal])\n\n//     const [listeUsagers, setListeUsagers] = useState('')\n//     const [nomUsager, setNomUsager] = useState(window.localStorage.getItem('usager')||'')\n//     const [dureeSession, setDureeSession] = useState(window.localStorage.getItem('dureeSession')||'86400')\n\n//     // Flags\n//     const [nouvelUsager, setNouvelUsager] = useState(false)  // Flag pour bouton nouvel usager\n//     const [authentifier, setAuthentifier] = useState(false)  // Flag pour ecran inscrire/authentifier\n//     const [attente, setAttente] = useState(false)\n//     const [compteRecovery, setCompteRecovery] = useState(false)  // Mode pour utiliser un code pour associer compte\n\n//     const evenementFingerprintPkCb = useCallback(evenement=>{\n//         const { connexion } = workers\n        \n//         console.debug(\"Recu message evenementFingerprintPkCb : %O\", evenement)\n//         const { message } = evenement || {},\n//               { certificat } = message\n//         const { nomUsager, requete } = usagerDbLocal\n//         if(certificat && requete) {\n//             const { clePriveePem, fingerprintPk } = requete\n//             sauvegarderCertificatPem(nomUsager, certificat, {clePriveePem, fingerprintPk})\n//                 .then(async ()=>{\n//                     const usagerMaj = await usagerDao.getUsager(nomUsager)\n//                     const nouvelleInfoBackend = await chargerUsager(connexion, nomUsager, null, fingerprintPk)\n\n//                     // Revenir a l'ecran d'authentification\n//                     setCompteRecovery(false)\n\n//                     // Pour eviter cycle, on fait sortir de l'ecran en premier. Set Usager ensuite.\n//                     setCompteUsagerServeur(nouvelleInfoBackend)\n//                     setUsagerDbLocalCb(usagerMaj)\n\n//                     setAuthentifier(true)\n//                     return workers.connexion.onConnect()\n//                 })\n//                 .catch(err=>erreurCb(err, \"Erreur de sauvegarde du nouveau certificat, veuillez cliquer sur Retour et essayer a nouveau.\"))\n//         } else {\n//             console.warn(\"Recu message evenementFingerprintPkCb sans certificat %O ou requete locale vide %O\", evenement, requete)\n//             erreurCb(\"Erreur de sauvegarde du nouveau certificat, veuillez cliquer sur Retour et essayer a nouveau.\")\n//         }\n//     }, [\n//         workers, usagerDbLocal, \n//         setAuthentifier, setCompteRecovery, setCompteUsagerServeur, setUsagerDbLocalCb,\n//         erreurCb,\n//     ])\n\n//     const requete = usagerDbLocal.requete || {},\n//           fingerprintPk = requete.fingerprintPk\n\n//     useEffect(()=>{\n//         usagerDao.getListeUsagers()\n//             .then(usagers=>{\n//                 if(usagers.length === 0) setNouvelUsager(true)\n//                 usagers.sort()  // Trier liste par nom\n//                 setListeUsagers(usagers)\n//             })\n//             .catch(err=>erreurCb(err))\n//     }, [setListeUsagers, setNouvelUsager, erreurCb])\n\n//     // Load/re-load usagerDbLocal sur changement de nomUsager\n//     useEffect(()=>{\n//         if(!nomUsager) return\n//         if(!usagerDbLocal || usagerDbLocal.nomUsager !== nomUsager) {\n//             initialiserCompteUsager(nomUsager) \n//                 .then(usagerLocal=>{\n//                     setUsagerDbLocalCb(usagerLocal)\n//                     console.debug(\"SetUsagerDbLocal : %O\", usagerLocal)\n//                 })\n//                 .catch(erreurCb)\n//         }\n//     }, [nomUsager, usagerDbLocal, setUsagerDbLocalCb, erreurCb])\n\n//     useEffect(()=>{\n//         // if(!etatConnexion) return\n//         // const { connexion } = workers\n//         // if(fingerprintPk) {\n//         //     // Activer listener\n//         //     const cb = comlinkProxy(evenementFingerprintPkCb)\n//         //     console.debug(\"Ajouter listening fingerprints : %s\", fingerprintPk)\n//         //     connexion.enregistrerCallbackEvenementsActivationFingerprint(fingerprintPk, cb)\n//         //         .then(()=>{\n//         //             workers.connexion.getInfoUsager(nomUsager, fingerprintPk).then(reponse=>{\n//         //                 console.debug(\"Information usager : \", reponse)\n//         //                 if(reponse.certificat) {\n//         //                     evenementFingerprintPkCb({message: reponse})\n//         //                         .catch(err=>console.error(\"Erreur recuperation certificat usager : \", err))\n//         //                 }\n//         //             })\n//         //             .catch(err=>console.info(\"Erreur chargement information certificat usager : \", err))\n//         //         })\n//         //         .catch(err=>erreurCb(err))\n//         //     return () => {\n//         //         console.debug(\"Retrait listening fingerprints : %s\", fingerprintPk)\n//         //         connexion.retirerCallbackEvenementsActivationFingerprint(fingerprintPk, cb)\n//         //             .catch(err=>console.warn(\"Erreur retrait evenement fingerprints : %O\", err))\n//         //     }\n//         // }\n//     }, [workers, etatConnexion, nomUsager, fingerprintPk, evenementFingerprintPkCb, erreurCb])\n\n//     if(compteRecovery) {\n//         // Etape = CompteRecovery\n//         return (\n//             <CompteRecovery \n//                 usagerDbLocal={usagerDbLocal}\n//                 setUsagerDbLocal={setUsagerDbLocalCb}\n//                 compteUsagerServeur={compteUsagerServeur}\n//                 setCompteUsagerServeur={setCompteUsagerServeur}\n//                 setAuthentifier={setAuthentifier}\n//                 setCompteRecovery={setCompteRecovery}\n//                 erreurCb={erreurCb}\n//                 />\n//         )\n//     } else if(authentifier) {\n//         if(compteUsagerServeur && compteUsagerServeur.infoUsager) {\n//             if(compteUsagerServeur.infoUsager.compteUsager === false) {\n//                 // Etape = InscrireUsager\n//                 return (\n//                     <InscrireUsager \n//                         setAuthentifier={setAuthentifier}\n//                         nomUsager={nomUsager}\n//                         setUsagerDbLocal={setUsagerDbLocalCb}\n//                         erreurCb={erreurCb}\n//                         />\n//                 )\n//             } else {\n//                 // Etape = Authentifier\n//                 return (\n//                     <Authentifier \n//                         nouvelUsager={nouvelUsager}\n//                         setAttente={setAttente}\n//                         nomUsager={nomUsager}\n//                         dureeSession={dureeSession}\n//                         usagerDbLocal={usagerDbLocal}\n//                         setAuthentifier={setAuthentifier}\n//                         etatUsagerBackend={compteUsagerServeur}\n//                         setEtatUsagerBackend={setCompteUsagerServeur}\n//                         setCompteRecovery={setCompteRecovery}\n//                         erreurCb={erreurCb}\n//                         />\n//                 )\n//             }\n//         }\n//     } else {\n//         // Etape = FormSelectionnerUsager\n//         return (\n//             <FormSelectionnerUsager \n//                 nomUsager={nomUsager}\n//                 setNomUsager={setNomUsager}\n//                 nouvelUsager={nouvelUsager}\n//                 setNouvelUsager={setNouvelUsager}\n//                 attente={attente}\n//                 setAttente={setAttente}\n//                 setAuthentifier={setAuthentifier}\n//                 listeUsagers={listeUsagers}\n//                 setCompteRecovery={setCompteRecovery}\n//                 etatUsagerBackend={compteUsagerServeur}\n//                 setEtatUsagerBackend={setCompteUsagerServeur}\n//                 usagerDbLocal={usagerDbLocal}\n//                 setUsagerDbLocal={setUsagerDbLocalCb}\n//                 dureeSession={dureeSession}\n//                 setDureeSession={setDureeSession}\n//                 erreurCb={erreurCb}\n//                 />\n//         )\n//     }\n\n}\n\nfunction CompteRecovery(props) {\n    const { \n        // usagerDbLocal, setUsagerDbLocal, \n        // compteUsagerServeur, setCompteUsagerServeur, \n        setAuthentifier, setCompteRecovery,\n        reloadCompteUsager,\n        erreurCb,\n    } = props\n\n    const { t } = useTranslation()\n\n    const workers = useWorkers()\n    const [usagerDb, setUsagerDb] = useUsagerDb()\n//           etatConnexion = useEtatConnexion()\n\n//     // const usagerDbLocal = useMemo(()=>{return props.usagerDbLocal || {}}, [props.usagerDbLocal])\n\n    const requete = usagerDb.requete || {},\n          nomUsager = usagerDb.nomUsager,\n          csr = requete.csr,\n          fingerprintPk = requete.fingerprintPk\n\n    console.debug(\"CompteRecovery usagerDb \", usagerDb)\n\n    const refBoutonCodeActivation = useRef()\n    const refBoutonCsrCopie = useRef()\n\n    const [code, setCode] = useState('')\n    const [showCodeCopie, setShowCodeCopie] = useState(false)\n    const [showCsrCopie, setShowCsrCopie] = useState(false)\n\n    const activationFingerprintCb = useCallback( e => {\n        console.debug(\"activationFingerprintCb Event : \", e)\n        \n        // Authentifier automatiquement avec le nouveau certificat\n        reloadCompteUsager()\n    }, [reloadCompteUsager, workers])\n    const activationFingerprintCbProxy = useMemo(()=>comlinkProxy(activationFingerprintCb), [activationFingerprintCb])\n\n    useEffect(()=>{\n        if(showCodeCopie) {\n            const timeout = setTimeout(()=>setShowCodeCopie(false), 5_000)\n            return () => clearTimeout(timeout)\n        }\n    }, [showCodeCopie, setShowCodeCopie])\n\n    useEffect(()=>{\n        if(showCsrCopie) {\n            const timeout = setTimeout(()=>setShowCsrCopie(false), 5_000)\n            return () => clearTimeout(timeout)\n        }\n    }, [showCsrCopie, setShowCsrCopie])\n\n//     const webAuthnSuccessHandler = useCallback(resultat=>{\n//         setCompteRecovery(false)\n//         console.debug(\"webAuthnSuccessHandler compteUsagerServeur: \", compteUsagerServeur)\n//         const params = {...resultat, nomUsager: compteUsagerServeur.nomUsager}\n//         sauvegarderUsagerMaj(workers, params)\n//             .catch(erreurCb)\n//     }, [workers, compteUsagerServeur, setCompteRecovery])\n\n    const erreurAuthCb = useCallback((err, message)=>{\n        if(err && ![0, 11, 20].includes(err.code)) {\n            erreurCb(err, message)\n        } else {\n            erreurCb(\"Erreur authentification annulee ou mauvaise cle\")\n        }\n    }, [erreurCb])\n\n    const retourCb = useCallback(()=>{\n        setAuthentifier(false)\n        setCompteRecovery(false)\n    }, [setAuthentifier, setCompteRecovery])\n\n    const copierCodeHandler = useCallback(()=>{\n        navigator.clipboard.writeText(code)\n            .then(()=>{\n                setShowCodeCopie(true)\n            })\n            .catch(erreurCb)\n    }, [code, setShowCodeCopie, erreurCb])\n\n    const copierCsr = useCallback(()=>{\n        navigator.clipboard.writeText(csr)\n            .then(()=>{\n                setShowCsrCopie(true)\n            })\n            .catch(erreurCb)\n    }, [csr, setShowCsrCopie])\n\n    // Generer nouveau CSR\n    useEffect(()=>{\n        const { requete } = usagerDb\n        if(nomUsager) {\n            // S'assurer qu'on une requete ou le bon compte\n            if(!requete) {\n                console.debug(\"Generer nouveau CSR\")\n                initialiserCompteUsager(nomUsager, {regenerer: true})\n                    .then(usager=>{\n                        setUsagerDb(usager)\n                        return ajouterCsrRecovery(workers, usager)\n                    })\n                    .catch(err=>erreurCb(err))\n            } else {\n                ajouterCsrRecovery(workers, usagerDb)\n                    .catch(err=>erreurCb(err))\n            }\n        }\n    }, [workers, nomUsager, usagerDb, setUsagerDb, erreurCb])\n\n    useEffect(()=>{\n        if(fingerprintPk) {\n            let codeComplet = fingerprintPk.slice(fingerprintPk.length-8)\n            codeComplet = codeComplet.toLowerCase()\n            codeComplet = [codeComplet.slice(0,4), codeComplet.slice(4,8)].join('-')\n            setCode(codeComplet)\n\n            // Enregistrer listener d'activation du fingerprint\n            console.debug(\"Enregistrer listener pour fingperintPk %s\", fingerprintPk)\n            workers.connexion.enregistrerCallbackEvenementsActivationFingerprint(fingerprintPk, activationFingerprintCbProxy)\n            return () => {\n                console.debug(\"Retirer listener pour fingperintPk %s\", fingerprintPk)\n                workers.connexion.retirerCallbackEvenementsActivationFingerprint(fingerprintPk, activationFingerprintCbProxy)\n            }\n\n        } else {\n            setCode('')\n        }\n    }, [workers, activationFingerprintCbProxy, fingerprintPk, setCode])\n\n    return (\n        <>\n            <Row>\n                <Col xs={10} md={11}><h2>{t('Authentification.echec-titre')}</h2></Col>\n                <Col xs={2} md={1} className=\"bouton\"><Button onClick={retourCb} variant=\"secondary\"><i className='fa fa-remove'/></Button></Col>\n            </Row>\n\n            <p>{t('Authentification.echec-description')}</p>\n\n            <Row>\n                <Col xs={12} md={6}>\n                    <h4>{t('Authentification.echec-activation-titre')}</h4>\n                    <Row>\n                        <Col xs={4}>{t('Authentification.echec-activation-champ-code')}</Col>\n                        <Col xs={8} className='code-activation'>\n                            <Button variant='link' ref={refBoutonCodeActivation} onClick={copierCodeHandler}>{code}</Button>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={4}>{t('Authentification.echec-activation-champ-compte')}</Col>\n                        <Col>{nomUsager}</Col>\n                    </Row>\n                    <p></p>\n                    <p className='code-instructions'>{t('Authentification.echec-activation-instruction1')}</p>\n                </Col>\n\n                <Col xs={12} md={6}>\n                    <h4>{t('Authentification.echec-codeqr-titre')}</h4>\n                    <RenderCsr value={csr} size={200} />\n                    <p className='code-instructions'>{t('Authentification.echec-codeqr-instruction')}</p>\n                </Col>\n\n                <Col xs={12} md={6} className='no-print'>\n                    <h4>{t('Authentification.echec-csr-titre')}</h4>\n                    <Button variant='secondary' ref={refBoutonCsrCopie} onClick={copierCsr}>Copier</Button>\n                    <p className='code-instructions'>{t('Authentification.echec-csr-instruction')}</p>\n                </Col>\n\n                <Col xs={12} md={6} className='no-print'>\n                    <h4>{t('Authentification.echec-cle-titre')}</h4>\n                    \n                    <p className='code-instructions'>{t('Authentification.echec-cle-instruction')}</p>\n\n                    {/* <BoutonAuthentifierWebauthn\n                        variant=\"secondary\"\n                        challenge={compteUsagerServeur.infoUsager.challengeWebauthn}\n                        onSuccess={webAuthnSuccessHandler}\n                        onError={erreurAuthCb}\n                        usagerDbLocal={usagerDbLocal}\n                    >\n                        {t('Authentification.echec-cle-bouton')}\n                    </BoutonAuthentifierWebauthn>\n */}\n                </Col>\n\n            </Row>\n\n            <p></p>\n\n            <Alert variant='secondary'>\n                <div><Trans>Authentification.echec-note-securite</Trans></div>\n            </Alert>\n\n            <Overlay target={refBoutonCodeActivation} show={showCodeCopie} placement='bottom'>\n                <div className='code-activation-overlay'>\n                    Code copie avec succes <i className='fa fa-check' />\n                </div>\n            </Overlay>\n\n            <Overlay target={refBoutonCsrCopie} show={showCsrCopie} placement='right'>\n                <div className='code-activation-overlay'>\n                    Code copie avec succes <i className='fa fa-check' />\n                </div>\n            </Overlay>\n\n            <p></p>\n        </>\n    )\n}\n\nfunction InscrireUsager(props) {\n    console.debug(\"!! InscrireUsager %O\", props)\n    const { setAuthentifier, nomUsager, erreurCb } = props\n    const { t } = useTranslation()\n    const workers = useWorkers()\n    const [usagerDb, setUsagerDb] = useUsagerDb()\n\n    const [etatBouton, setEtatBouton] = useState('')\n\n    const onClickSuivant = useCallback( () => {\n        setEtatBouton('attente')\n        suivantInscrire(workers, nomUsager, setUsagerDb, erreurCb)\n            .then(async () => {\n                setEtatBouton('succes')\n                setAuthentifier(true)\n                await workers.connexion.reconnecter()  // Va authentifier la connexion socket.io avec la session\n            })\n            .catch(err=>{\n                setEtatBouton('echec')\n                erreurCb(err)\n            })\n    }, [workers, nomUsager, setUsagerDb, setEtatBouton, erreurCb])\n    const onClickAnnuler = useCallback( () => setAuthentifier(false), [setAuthentifier])\n\n    return (\n        <>\n            <h2><Trans>Authentification.creer-compte-titre</Trans></h2>\n\n            <div>\n                <p>{t('Authentification.creer-compte-disponible', {nomUsager: props.nomUsager})}</p>\n\n                <p><Trans>Authentification.creer-compte-instructions</Trans></p>\n\n                <Row className=\"boutons\">\n                    <Col className=\"bouton-gauche\">\n                        <BoutonActif etat={etatBouton} onClick={onClickSuivant}>\n                            <Trans>Authentification.bouton-inscrire</Trans>\n                        </BoutonActif>\n                    </Col>\n                    <Col className=\"bouton-droite\">\n                        <Button variant=\"secondary\" onClick={onClickAnnuler}>\n                            <Trans>Forms.cancel</Trans>\n                        </Button>\n                    </Col>\n                </Row>\n            </div>\n        </>\n    )\n}\n\nfunction Authentifier(props) {\n\n    const {\n        nouvelUsager, setAttente, \n        nomUsager, dureeSession,\n        // usagerDbLocal, \n        setAuthentifier, \n        // etatUsagerBackend, setEtatUsagerBackend, \n        setCompteRecovery,\n        erreurCb\n    } = props\n\n    const workers = useWorkers()\n    const etatFormatteurPret = useFormatteurPret()\n\n    const usagerDb = useUsagerDb()[0],\n          usagerWebAuth = useUsagerWebAuth()[0]\n\n    const challengeWebauthn = useMemo(()=>{\n        if(usagerWebAuth && usagerWebAuth.infoUsager) {\n            const challenge = usagerWebAuth.infoUsager.authentication_challenge\n            console.debug(\"Authentifier.challengeWebauthn \", challenge)\n            return challenge\n        }\n    }, [usagerWebAuth])\n\n    const onSuccessWebAuth = useCallback(resultat=>{\n        console.debug(\"InputAfficherListeUsagers onSuccessWebAuth \", resultat)\n\n        const params = {...resultat, nomUsager}\n        sauvegarderUsagerMaj(workers, params)\n            .then(async () => {\n                if(!!resultat.auth) {\n                    console.info(\"onSuccessWebAuth Reconnecter pour authentification socket.io\")\n                    // Reconnexion devrait faire setEtatSessionActive(true) via socket.io\n                    await workers.connexion.reconnecter()\n                    await workers.connexion.onConnect()\n                } else {\n                    console.error(\"onSuccessWebAuth Echec Authentification \", resultat)\n                }\n            })\n            .catch(erreurCb)\n    }, [workers, nomUsager, setAuthentifier])\n\n    // Authentification automatique si applicable\n    useEffect(()=>{\n        console.debug(\"Authentifier formatteurPret %s, usagerWebAuth %O\", etatFormatteurPret, usagerWebAuth)\n        if(!etatFormatteurPret || !usagerWebAuth || !usagerWebAuth.infoUsager) return\n\n        const infoUsager = usagerWebAuth.infoUsager || {}\n        const methodesDisponibles = infoUsager.methodesDisponibles\n        const challengeCertificat = infoUsager.challenge_certificat\n        if(methodesDisponibles.activation && challengeCertificat) {\n            console.debug(\"Authentification avec signature certificat et challenge \", challengeCertificat)\n\n            const data = {certificate_challenge: challengeCertificat}\n            workers.connexion.formatterMessage(data, 'auth', {action: 'authentifier_usager', kind: MESSAGE_KINDS.KIND_COMMANDE})\n                .then( async messageSigne => {\n                    const resultatAuthentification = await axios.post('/auth/authentifier_usager', messageSigne)\n                    const contenu = JSON.parse(resultatAuthentification.data.contenu)\n                    console.debug(\"Resultat authentification \", resultatAuthentification)\n                    if(!!contenu.auth) {\n                        await workers.connexion.reconnecter()\n                        await workers.connexion.onConnect()\n                        setAuthentifier(false)\n                    } else {\n                        erreurCb(`Erreur authentification : ${contenu.err}`)\n                    }\n                })\n                .catch(erreurCb)\n        }\n    }, [workers, etatFormatteurPret, usagerWebAuth, setAuthentifier])\n\n//     const workers = useWorkers(),\n//           etatFormatteurPret = useFormatteurPret(),\n//           etatPret = useEtatPret()\n\n//     const challengeWebauthn = useMemo(()=>{\n//         if(etatUsagerBackend && etatUsagerBackend.infoUsager) {\n//             return etatUsagerBackend.infoUsager.authentication_challenge\n//         }\n//     }, [etatUsagerBackend])\n\n//     const onClickWebAuth = useCallback(resultat=>{\n//         console.debug(\"Authentifier.onClickWebAuthn onclick webauthn %s : %O\", nomUsager, resultat)\n//         const params = {...resultat, nomUsager}\n//         sauvegarderUsagerMaj(workers, params)\n//             .catch(erreurCb)\n//     }, [workers, nomUsager, erreurCb])\n\n//     // Attendre que le formatteur (certificat) soit pret\n//     useEffect(()=>{\n//         console.debug(\"Formatteur pret? %s, usagerDbLocal %O, etat usager back-end : %O\", \n//             etatFormatteurPret, usagerDbLocal, etatUsagerBackend)\n        \n//         if(!usagerDbLocal) return\n\n//         const { connexion } = workers\n\n//         if(!etatFormatteurPret) {\n//             chargerFormatteurCertificat(workers, usagerDbLocal).catch(erreurCb)\n//         } else if(etatUsagerBackend) {\n//             console.debug(\"onClickWebAuth etatUsagerBackend : \", etatUsagerBackend)\n//             // Authentifier\n//             const methodesDisponibles = etatUsagerBackend.infoUsager.methodesDisponibles || {}\n//             if(methodesDisponibles['certificat']) {\n//                 // console.debug(\"Authentifier avec le certificat\")\n//                 // connexion.authentifierCertificat(challengeCertificat)\n//                 connexion.authentifier()\n//                     .then(reponse=>{\n//                         console.debug(\"Reponse authentifier certificat : %O\", reponse)\n//                         setEtatUsagerBackend(reponse)\n//                     })\n//                     .catch(err=>{\n//                         console.warn(\"Authentifier: Erreur de connexion : %O\", err)\n//                         // Note : erreur OK, le compte peut avoir un certificat active dans navigateur tiers\n//                         // erreurCb(err, 'Erreur de connexion (authentification du certificat refusee)')\n//                     })\n//             }\n//         } else if(!nouvelUsager && etatPret === false && !usagerDbLocal.certificat) {\n//             // On a un certificat absent ou expire\n//             // console.info(\"Certificat absent\")\n//             setCompteRecovery(true)\n//         }\n//     }, [\n//         workers, etatFormatteurPret, etatPret, nouvelUsager, usagerDbLocal, etatUsagerBackend, \n//         setEtatUsagerBackend, setCompteRecovery, \n//         erreurCb\n//     ])\n\n//     // Conserver usager selectionne (pour reload ecran)\n//     useEffect(()=>window.localStorage.setItem('usager', nomUsager), [nomUsager])\n//     useEffect(()=>{\n//         console.debug(\"Set duree session \", dureeSession)\n//         window.localStorage.setItem('dureeSession', dureeSession)\n//     }, [dureeSession])\n\n    const recoveryCb = useCallback(()=>setCompteRecovery(true), [setCompteRecovery])\n    const annulerCb = useCallback(()=>setAuthentifier(false), [setAuthentifier])\n\n    //     const annulerCb = useCallback(()=>{\n//         fermerSession(setAuthentifier, setEtatUsagerBackend)\n//             .catch(err=>erreurCb(err))\n//     }, [setAuthentifier, setEtatUsagerBackend, erreurCb])\n\n    let message = <p>Ouverture d'une nouvelle session en cours ... <i className=\"fa fa-spinner fa-spin fa-fw\" /></p>\n    if(nouvelUsager) message = 'Cliquez sur Suivant pour vous connecter.'\n//     else if(!etatPret) message = 'Attente de preparation du certificat'\n\n    return (\n        <>\n            <Alert variant=\"info\">\n                <Alert.Heading>Ouverture de session</Alert.Heading>\n                \n                {message}\n            </Alert>\n\n            <Row>\n                <Col className=\"button-list\">\n                    {(usagerDb && nouvelUsager)?\n                        <BoutonAuthentifierWebauthn \n                            nomUsager={nomUsager}\n                            usagerDb={usagerDb}\n                            challenge={challengeWebauthn}\n                            setAttente={setAttente}\n                            onSuccess={onSuccessWebAuth}\n                            onError={erreurCb}\n                            dureeSession={dureeSession}>\n                            Suivant\n                        </BoutonAuthentifierWebauthn>\n                    :''}\n                    <Button variant=\"secondary\" onClick={recoveryCb}>Utiliser un code</Button>\n                    <Button variant=\"secondary\" onClick={annulerCb}>Annuler</Button>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nfunction FormSelectionnerUsager(props) {\n\n    const {\n        nomUsager, setNomUsager,\n        nouvelUsager, setNouvelUsager,\n        attente, setAttente,\n        setAuthentifier,\n        setCompteRecovery,\n        dureeSession, setDureeSession,\n        erreurCb,\n    } = props\n\n    const [listeUsagers, setListeUsagers] = useState('')\n    \n    const usagerWebAuth = useUsagerWebAuth()[0]\n\n    useEffect(()=>{\n        usagerDao.getListeUsagers()\n            .then(usagers=>{\n                if(usagers.length === 0) setNouvelUsager(true)\n                usagers.sort()  // Trier liste par nom\n                console.debug(\"Liste usagers locaux (IDB) \", usagers)\n                setListeUsagers(usagers)\n            })\n            .catch(err=>erreurCb(err))\n    }, [setListeUsagers, setNouvelUsager, erreurCb])\n\n//     console.debug(\"Etat usager backend : \", etatUsagerBackend)\n\n//     const etatUsagerInfo = etatUsagerBackend.infoUsager || {},\n//         activation = etatUsagerInfo.activation || {},\n//         peutActiver = activation.valide === true\n    const peutActiver = useMemo(()=>{\n        if(!usagerWebAuth || !usagerWebAuth.infoUsager) return false\n        const methodesDisponibles = usagerWebAuth.infoUsager.methodesDisponibles || {}\n        return methodesDisponibles.activation || false\n    }, [usagerWebAuth])\n\n    if(nouvelUsager) {\n        return (\n            <Form.Group controlId=\"formNomUsager\">\n                <InputSaisirNomUsager \n                    setNomUsager={setNomUsager}\n                    setNouvelUsager={setNouvelUsager} \n                    attente={attente}\n                    setAttente={setAttente}\n                    setAuthentifier={setAuthentifier}\n                    setCompteRecovery={setCompteRecovery}\n                    peutActiver={peutActiver}\n                    dureeSession={dureeSession}\n                    setDureeSession={setDureeSession}\n                    erreurCb={erreurCb}\n                    />\n            </Form.Group>\n        )\n    }\n\n    return (\n        <Form.Group controlId=\"formNomUsager\">\n            <InputAfficherListeUsagers \n                nomUsager={nomUsager}\n                setNomUsager={setNomUsager}\n                setNouvelUsager={setNouvelUsager} \n                attente={attente}\n                setAttente={setAttente}\n                setAuthentifier={setAuthentifier}\n                listeUsagers={listeUsagers}\n                setCompteRecovery={setCompteRecovery}\n                peutActiver={peutActiver}\n                dureeSession={dureeSession}\n                setDureeSession={setDureeSession}\n                erreurCb={erreurCb}\n                />\n        </Form.Group>\n    )\n}\n\nfunction InputSaisirNomUsager(props) {\n    const {\n        setNomUsager, \n        attente, setAttente, \n        setNouvelUsager, \n        setAuthentifier, \n        erreurCb\n    } = props\n\n    const {t} = useTranslation()\n    const workers = useWorkers()\n\n    const [nom, setNom] = useState('')\n   \n    const nomUsagerOnChangeCb = useCallback(event=>setNom(event.currentTarget.value), [setNom])\n\n    const annulerHandler = useCallback(()=>setNouvelUsager(false), [setNouvelUsager])\n\n    const suivantCb = useCallback(\n        () => {\n            console.debug(\"BoutonsAuthentifier Suivantcb %s\", nom)\n            setNomUsager(nom)       // useEffect sur SectionAuthentification va reloader webauth et idb\n            setAuthentifier(true)   // Lance l'ecran d'inscription ou login\n        }, \n        [workers, nom, setNomUsager, setAttente, setAuthentifier, erreurCb]\n    )\n\n    if(!!props.show) return ''\n\n    let loginSansVerification = false  //  TODO FIX ME : peutActiver\n    let variantBouton = loginSansVerification?'success':'primary'\n    const suivantDisabled = nom?false:true\n\n    return (\n        <div>\n            <Form.Group controlId=\"formNomUsager\">\n                <Form.Label><Trans>Authentification.nomUsager</Trans></Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    placeholder={t('Authentification.saisirNom')}\n                    value={nom}\n                    onChange={nomUsagerOnChangeCb}\n                    disabled={attente} />\n        \n                <Form.Text className=\"text-muted\">\n                    <Trans>Authentification.instructions1</Trans>\n                </Form.Text>\n            </Form.Group>\n\n            <Row className=\"boutons preauth\">\n                <Col xs={12} sm={4} className=\"bouton-gauche\">\n                    <Button variant={variantBouton} disabled={attente || suivantDisabled} onClick={suivantCb}>\n                        <Trans>Forms.next</Trans>\n                    </Button>\n                </Col>\n                <Col xs={12} sm={4} >\n                    <Button variant=\"secondary\" disabled={true}>\n                        <Trans>Forms.new</Trans>\n                    </Button>\n                </Col>\n                <Col xs={12} sm={4}  className=\"bouton-droite\">\n                    <Button variant=\"secondary\" onClick={annulerHandler}>\n                        <Trans>Forms.cancel</Trans>\n                    </Button>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nfunction InputAfficherListeUsagers(props) {\n\n    const {\n//         // workers, etatConnexion, disabled, \n        nomUsager, setNomUsager,\n        listeUsagers, \n        setNouvelUsager, \n        attente, setAttente,\n        setAuthentifier, \n//         usagerDbLocal, setUsagerDbLocal,\n//         etatUsagerBackend, setEtatUsagerBackend,\n        setCompteRecovery,\n        peutActiver,\n        dureeSession, setDureeSession,\n        erreurCb,\n    } = props\n\n    const usagerDb = useUsagerDb()[0]\n    const usagerWebAuth = useUsagerWebAuth()[0]\n    const [etatSessionActive, setEtatSessionActive] = useEtatSessionActive()\n\n    const {t} = useTranslation()\n    const workers = useWorkers()\n//     const setEtatSessionActive = useSetEtatSessionActive()\n//     // const etatConnexion = useEtatConnexion()\n//     // const { connexion } = workers\n\n    const nouvelUsagerHandler = useCallback( () => {\n        setNouvelUsager(true)\n        // Promise.all([\n        //     setNomUsager(''),\n        //     setEtatUsagerBackend(''),\n        //     setUsagerDbLocal(''),\n        // ]).then(()=>setNouvelUsager(true))\n    }, [setNomUsager, setNouvelUsager])\n\n    const usagerOnChange = useCallback(event=>{\n        setNouvelUsager(false)\n        setNomUsager(event.currentTarget.value)\n    }, [setNomUsager, setNouvelUsager])\n\n    const onChangeDureeSession = useCallback(event=>setDureeSession(event.currentTarget.value), [setDureeSession])\n\n    const onSuccessWebAuth = useCallback(resultat=>{\n        console.debug(\"InputAfficherListeUsagers onSuccessWebAuth \", resultat)\n\n        const params = {...resultat, nomUsager}\n        sauvegarderUsagerMaj(workers, params)\n            .then(async () => {\n                if(!!resultat.auth) {\n                    console.info(\"onSuccessWebAuth Reconnecter pour authentification socket.io\")\n                    // Reconnexion devrait faire setEtatSessionActive(true) via socket.io\n                    await workers.connexion.reconnecter()\n                    await workers.connexion.onConnect()\n                } else {\n                    console.error(\"onSuccessWebAuth Echec Authentification \", resultat)\n                }\n            })\n            .catch(erreurCb)\n    }, [workers, nomUsager, setAuthentifier, setEtatSessionActive])\n\n    const erreurAuthCb = useCallback((err, message)=>{\n        if(err && ![0, 11, 20].includes(err.code)) {\n            erreurCb(err, message)\n        } else {\n            //console.debug(\"Erreur authentification annulee/mauvaise cle, on passe au mode recovery\")\n            setCompteRecovery(true)\n            setAuthentifier(true)\n        }\n    }, [erreurCb, setCompteRecovery, setAuthentifier])\n\n    const suivantNoAuthCb = useCallback(\n        () => {\n            console.debug(\"BoutonsAuthentifier Suivantcb %s\", nomUsager)\n            try {\n                setAttente(true)\n                setAuthentifier(true)\n                // workers.connexion.onConnect()\n                //     .catch(erreurCb)\n            } catch(err) {\n                erreurCb(err)\n            }\n        }, \n        [workers, nomUsager, setAttente, setAuthentifier, erreurCb]\n    )\n\n    useEffect(()=>{\n        // console.debug(\"Re-Set nom usager\")\n        if(listeUsagers.length > 0) {\n            if(listeUsagers.includes(nomUsager)) {\n                // Rien a faire\n            } else {\n                const usagerLocal = window.localStorage.getItem('usager')\n                if(listeUsagers.includes(usagerLocal)) {\n                    setNomUsager(usagerLocal)\n                } else {\n                    setNomUsager(listeUsagers[0])\n                }\n            }\n        }\n    }, [nomUsager, setNomUsager, listeUsagers])\n\n//     useEffect(()=>{\n//         // console.debug(\"Pre-charger usager (etat %O) %O\", etatConnexion, nomUsager)\n//         // if(etatConnexion && nomUsager) {\n//         //     // console.debug(\"Pre-charger le compte usager %s\", nomUsager)\n//         //     preparerUsager(workers, nomUsager, erreurCb, {genererChallenge: true})\n//         //         .then(async resultat => {\n//         //             const usagerDbLocal = await usagerDao.getUsager(nomUsager)\n//         //             setEtatUsagerBackend(resultat)\n//         //             setUsagerDbLocal(usagerDbLocal)\n//         //             // console.debug(\"Usager backend info %O, dbLocal %O\", resultat, usagerDbLocal)\n//         //             // setAuthentifier(true)\n//         //         })\n//         //         .catch(err=>erreurCb(err))\n//         //         .finally(()=>setAttente(false))\n//         // }\n\n//         console.debug(\"Pre-charger usager %O\", nomUsager)\n//         if(nomUsager) {\n//             // console.debug(\"Pre-charger le compte usager %s\", nomUsager)\n//             preparerUsager(workers, nomUsager, erreurCb, {genererChallenge: true})\n//                 .then(async resultat => {\n//                     console.debug(\"Resultat preparer usager %O\", resultat)\n//                     const usagerDbLocal = await usagerDao.getUsager(nomUsager)\n//                     setEtatUsagerBackend(resultat)\n//                     setUsagerDbLocal(usagerDbLocal)\n//                     setEtatSessionActive(!!resultat.authentifie)\n//                 })\n//                 .catch(err=>erreurCb(err))\n//                 .finally(()=>setAttente(false))\n//         }\n//     }, [/*connexion, etatConnexion,*/ workers, nomUsager, setEtatUsagerBackend, setUsagerDbLocal, setUsagerDbLocal, erreurCb])\n\n//     console.debug(\"Liste usagers : \", listeUsagers)\n    if(!listeUsagers) return ''\n\n    return (\n        <div>\n            <Form.Group controlId=\"formNomUsager\">\n                <Form.Label><Trans>Authentification.nomUsager</Trans></Form.Label>\n                <Form.Select\n                    type=\"text\"\n                    value={nomUsager}\n                    placeholder={t('Authentification.saisirNom')}\n                    onChange={usagerOnChange}\n                    disabled={attente}>\n            \n                    {props.listeUsagers.map(nomUsager=>(\n                        <option key={nomUsager} value={nomUsager}>{nomUsager}</option>\n                    ))}\n        \n                </Form.Select>\n        \n                <Form.Text className=\"text-muted\">\n                    <Trans>Authentification.instructions2</Trans>\n                </Form.Text>\n            </Form.Group>\n\n            <p></p>\n\n            <Form.Group controlId=\"formDureeSession\">\n                <Form.Label>Duree de la session</Form.Label>\n                <Form.Select \n                    value={dureeSession}\n                    onChange={onChangeDureeSession}\n                    disabled={attente}>\n                    <option value='3600'>1 heure</option>\n                    <option value='86400'>1 jour</option>\n                    <option value='604800'>1 semaine</option>\n                    <option value='2678400'>1 mois</option>\n                </Form.Select>\n                <Form.Text className=\"text-muted\">\n                    Apres cette periode, l'appareil va reverifier votre identite.\n                </Form.Text>\n            </Form.Group>\n\n            <Row className=\"boutons preauth\">\n\n                <Col xs={12} sm={4} className=\"bouton-gauche\">\n                    <BoutonAuthentifierListe\n                        setAttente={setAttente}\n                        onClickWebAuth={onSuccessWebAuth}\n                        suivantNoWebauthnHandler={suivantNoAuthCb}\n                        erreurAuthCb={erreurAuthCb}\n                        peutActiver={peutActiver}\n                        dureeSession={dureeSession}\n                    >\n                        <Trans>Forms.next</Trans>\n                        {peutActiver?[' ', <i className='fa fa-arrow-right'/>]:''}\n                    </BoutonAuthentifierListe>\n                </Col>\n\n                <Col xs={12} sm={4} >\n                    <Button variant=\"secondary\" onClick={nouvelUsagerHandler}>\n                        <Trans>Forms.new</Trans>\n                    </Button>\n                </Col>\n\n                <Col xs={12} sm={4}  className=\"bouton-droite\">\n                    <Button variant=\"secondary\" disabled={true}>\n                        <Trans>Forms.cancel</Trans>\n                    </Button>\n                </Col>\n\n            </Row>            \n        </div>\n    )\n\n}\n\nfunction BoutonAuthentifierListe(props) {\n\n    // console.debug('BoutonAuthentifierListe PROPPIES', props)\n\n    const { onClickWebAuth, suivantNoWebauthnHandler, erreurAuthCb, peutActiver, dureeSession } = props\n\n    const usagerWebAuth = useUsagerWebAuth()[0]\n    const usagerDb = useUsagerDb()[0]\n\n    const nouvelUsager = useMemo(()=>{\n        console.debug(\"BoutonAuthentifierListe usagerWebAuth : %O\", usagerWebAuth)\n        if(usagerWebAuth && !usagerWebAuth.infoUsager) return true\n        return false\n    }, [usagerWebAuth])\n\n    const challengeWebauthn = useMemo(()=>{\n        if(usagerWebAuth && usagerWebAuth.infoUsager) {\n            return usagerWebAuth.infoUsager.authentication_challenge\n        }\n        return ''\n    }, [usagerWebAuth])\n\n    if(nouvelUsager || peutActiver === true) {\n        return (\n            <Button variant=\"success\" onClick={suivantNoWebauthnHandler}>{props.children}</Button>\n        )\n    }\n\n    return (\n        <BoutonAuthentifierWebauthn\n            variant=\"primary\"\n            challenge={challengeWebauthn}\n            onSuccess={onClickWebAuth}\n            onError={erreurAuthCb}\n            usagerDb={usagerDb}\n            dureeSession={dureeSession}\n        >\n            {props.children}\n        </BoutonAuthentifierWebauthn>        \n    )\n}\n\nasync function ajouterCsrRecovery(workers, usagerDb) {\n    const { connexion } = workers\n    const { nomUsager, requete } = usagerDb\n    if(nomUsager && requete && requete.csr) {\n        const csr = requete.csr\n        await connexion.ajouterCsrRecovery(nomUsager, csr)\n    }\n}\n\nasync function suivantInscrire(workers, nomUsager, setUsagerDb, erreurCb) {\n    //console.debug(\"Inscrire\")\n    try {\n        const {connexion} = workers\n        const usagerInit = await initialiserCompteUsager(nomUsager)\n        const requete = usagerInit.requete || {}\n        const { csr, clePriveePem, fingerprintPk } = requete\n \n        console.debug(\"suivantInscrire Inscrire usager %s avec CSR navigateur\\n%O\", nomUsager, csr)\n        const reponseInscription = await connexion.inscrireUsager(nomUsager, csr)\n        console.debug(\"suivantInscrire Reponse inscription : %O\", reponseInscription)\n      \n        if(reponseInscription.ok !== true) {\n            console.warn(\"Erreur inscription usager : \", reponseInscription)\n            throw new Error(`Erreur inscription usager : ${reponseInscription}`)\n        }\n\n        // Enregistrer le certificat dans IndexedDB\n        const certificatChaine = reponseInscription.certificat\n\n        if(!certificatChaine) {\n            erreurCb(\"Le certificat n'a pas ete recu lors de la confirmation d'inscription.\", \"L'inscription a echouee\")\n            return\n        }\n\n        // Injecter delegations_version: 1 au besoin\n        const delegations_version = reponseInscription.delegations_version || 1\n        reponseInscription.delegations_version = delegations_version\n\n        console.debug(\"suivantInscrire Certificats recus : cert: %O\", certificatChaine)\n        await sauvegarderCertificatPem(nomUsager, certificatChaine, {clePriveePem, fingerprintPk, delegations_version})\n      \n        // Recharger usager, applique le nouveau certificat\n        const usagerDbLocal = await usagerDao.getUsager(nomUsager)\n        await setUsagerDb(usagerDbLocal)\n\n        // Conserver usager selectionne pour reload\n        window.localStorage.setItem('usager', nomUsager)\n\n        // if(reponseInscription.authentifie === true) {\n        //     // Declencher une authentification avec le nouveau certificat \n        //     console.debug(\"suivantInscrire Authentifier\")\n        //     //await connexion.authentifier()\n        // }\n\n    } catch(err) {\n        console.error(\"suivantInscrire Erreur inscrire usager : %O\", err)\n        erreurCb(err, \"Erreur inscrire usager\")\n    }\n}\n\n// async function fermerSession(setAuthentifier, setEtatUsagerBackend) {\n//     const axios = (await import('axios')).default\n//     try {\n//         await axios.get('/millegrilles/authentification/fermer')\n//     } catch(err) {\n//         console.warn(\"Erreur fermer session : %O\", err)\n//     } finally {\n//         setAuthentifier(false)\n//         setEtatUsagerBackend(false)\n//     }\n\n//     try {\n//         await axios.get('/auth/verifier_usager')\n//     } catch(err) {\n//         const response = err.response || {}\n//         const status = response.status\n//         if(status === 401) {\n//             // Ok, session creee et usager n'est pas authentifie\n//         } else {\n//             console.error(\"Erreur verification session fermee : %O\", response)\n//         }\n//     }\n// }\n\nasync function sauvegarderUsagerMaj(workers, reponse) {\n\n    if(!reponse.certificat) {\n        await workers.connexion.onConnect()\n        return\n    }\n\n    const { connexion, usagerDao } = workers\n    const { nomUsager, delegations_date, delegations_version, certificat } = reponse\n\n    // console.debug(\"Nouveau certificat recu, on va le sauvegarder\")\n    const usagerDbLocal = await usagerDao.getUsager(nomUsager)\n    console.debug(\"UsagerDbLocal \", usagerDbLocal)\n\n    console.debug(\"sauvegarderUsagerMaj Reponse %O, usagerDbLocal %O\", reponse, usagerDbLocal)\n\n    // Remplacer clePriveePem et fingerprintPk\n    if(usagerDbLocal.requete) {\n        const { clePriveePem, fingerprintPk } = usagerDbLocal.requete\n\n        await sauvegarderCertificatPem(\n            nomUsager, \n            certificat, \n            {clePriveePem, fingerprintPk, delegations_date, delegations_version}\n        )\n\n        // Reload usager\n        return await usagerDao.getUsager(nomUsager)\n    }\n}\n\nasync function chargerFormatteurCertificat(workers, usagerDb) {\n    console.debug(\"Preparer formatteur de messages pour usager %O\", usagerDb)\n    const connexion = workers.connexion\n    const { certificat, clePriveePem } = usagerDb\n    if(connexion && certificat && clePriveePem) {\n        await connexion.initialiserFormatteurMessage(certificat, clePriveePem)\n        return true\n    } else {\n        await connexion.clearFormatteurMessage()\n        return false\n    }\n}\n"],"names":["RenderCsr","props","value","size","className","useState","csrStringBuffer","setCsrStringBuffer","useEffect","_","csrPem","regEx","pemBase64","replaceAll","csrAb","Uint8Array","Buffer","from","String","fromCharCode","apply","preparerCsr","erreurCb","Row","Col","xs","sm","md","lg","SectionAuthentification","workers","useWorkers","useUsagerDb","usagerDb","setUsagerDb","useUsagerWebAuth","usagerWebAuth","setUsagerWebAuth","window","localStorage","getItem","nomUsager","setNomUsager","dureeSession","setDureeSession","nouvelUsager","setNouvelUsager","authentifier","setAuthentifier","attente","setAttente","compteRecovery","setCompteRecovery","reloadCompteUsager","useCallback","initialiserCompteUsager","then","usagerLocal","console","debug","requete","fingerprintPk","fingerprintCourant","certificat","clePriveePem","chargerFormatteurCertificat","chargerUsager","genererChallenge","reponseUsagerWebAuth","infoUsager","info","reponse","sauvegarderUsagerMaj","usagerLocalMaj","catch","CompteRecovery","Authentifier","InscrireUsager","FormSelectionnerUsager","t","useTranslation","csr","refBoutonCodeActivation","useRef","refBoutonCsrCopie","code","setCode","showCodeCopie","setShowCodeCopie","showCsrCopie","setShowCsrCopie","activationFingerprintCb","e","activationFingerprintCbProxy","useMemo","comlinkProxy","timeout","setTimeout","clearTimeout","err","message","includes","retourCb","copierCodeHandler","navigator","clipboard","writeText","copierCsr","ajouterCsrRecovery","regenerer","usager","codeComplet","slice","length","toLowerCase","join","connexion","enregistrerCallbackEvenementsActivationFingerprint","retirerCallbackEvenementsActivationFingerprint","Button","onClick","variant","ref","Alert","Trans","Overlay","target","show","placement","etatBouton","setEtatBouton","onClickSuivant","suivantInscrire","reconnecter","onClickAnnuler","BoutonActif","etat","etatFormatteurPret","useFormatteurPret","challengeWebauthn","challenge","authentication_challenge","onSuccessWebAuth","resultat","params","auth","onConnect","error","methodesDisponibles","challengeCertificat","challenge_certificat","activation","data","certificate_challenge","formatterMessage","action","kind","MESSAGE_KINDS","KIND_COMMANDE","messageSigne","axios","post","resultatAuthentification","contenu","JSON","parse","recoveryCb","annulerCb","Heading","onSuccess","onError","listeUsagers","setListeUsagers","usagerDao","getListeUsagers","usagers","sort","peutActiver","Form","Group","controlId","InputSaisirNomUsager","InputAfficherListeUsagers","nom","setNom","nomUsagerOnChangeCb","event","currentTarget","annulerHandler","suivantCb","suivantDisabled","Label","Control","type","placeholder","onChange","disabled","Text","useEtatSessionActive","setEtatSessionActive","nouvelUsagerHandler","usagerOnChange","onChangeDureeSession","erreurAuthCb","suivantNoAuthCb","Select","map","BoutonAuthentifierListe","onClickWebAuth","suivantNoWebauthnHandler","children","usagerInit","inscrireUsager","reponseInscription","ok","warn","Error","certificatChaine","delegations_version","sauvegarderCertificatPem","getUsager","usagerDbLocal","setItem","delegations_date","initialiserFormatteurMessage","clearFormatteurMessage"],"sourceRoot":""}