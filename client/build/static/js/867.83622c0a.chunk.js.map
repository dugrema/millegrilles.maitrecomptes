{"version":3,"file":"static/js/867.83622c0a.chunk.js","mappings":"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","sources":["i18n.js","App2.js","workers/workerLoader.js","WorkerContext.js"],"sourcesContent":["import i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nimport moment from 'moment'\n\nfunction formatterValeur(value, format, lng) {\n  if(value instanceof Date) {\n    return moment(value).locale(lng).format(format)\n  } else if(!isNaN(value) && !isNaN(format)) {\n    return Number(value).toFixed(format)\n  }\n\n  return value;\n}\n\ni18n\n  // load translation using http -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'fr',\n    // debug: true,\n\n    backend: {\n      loadPath: '/millegrilles/locales/{{lng}}/{{ns}}.json',\n    },\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n      format: formatterValeur,\n    },\n  });\n\nexport default i18n;","import { lazy, useState, useCallback, useMemo, Suspense, useEffect } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport Alert from 'react-bootstrap/Alert'\nimport Container from 'react-bootstrap/Container'\n\nimport i18n from './i18n'\n\nimport { ModalAttente, LayoutMillegrilles, ModalErreur, initI18n, ErrorBoundary } from '@dugrema/millegrilles.reactjs'\nimport useWorkers, { useEtatConnexion, WorkerProvider, useEtatPret, useEtatSessionActive, useUsagerDb, useUsagerSocketIo } from './WorkerContext'\n\nimport './index.scss'\nimport './App.css'\n\n// Wire i18n dans module @dugrema/millegrilles.reactjs\ninitI18n(i18n)\n\nconst MenuApp = lazy( () => import('./Menu') )\nconst PreAuthentifier = lazy( () => import('./PreAuthentifier') )\nconst Accueil = lazy( () => import('./Accueil') )\nconst SectionActiverDelegation = lazy( () => import('./ActiverDelegation') )\nconst SectionActiverCompte = lazy( () => import('./ActiverCompte') )\nconst SectionAjouterMethode = lazy( () => import('./AjouterMethode') )\n\nfunction App() {\n\n    const [erreurInit, setErreurInit] = useState(false)\n\n    useEffect(()=>{\n        // Maj splash/loading screen\n        document.getElementById('splash_init3').className = ''\n    }, [])\n\n    return (\n      <WorkerProvider setErr={setErreurInit} attente={<Attente err={erreurInit} />}>\n        <ErrorBoundary errorCb={setErreurInit} >\n          <Suspense fallback={<Attente2 />}>\n            <AppTop />\n          </Suspense>\n        </ErrorBoundary>\n      </WorkerProvider>\n    )\n  \n}\nexport default App\n\nfunction AppTop(_props) {\n\n    const { t, i18n } = useTranslation()\n\n    const [sectionAfficher, setSectionAfficher] = useState('')\n\n    // Messages, erreurs\n    const [attente, setAttente] = useState(false)\n\n    const [confirmation, setConfirmation] = useState('')\n    const confirmationCb = useCallback(message => {\n        console.debug(\"Confirmation : \", message)\n        setConfirmation(message)\n    }, [setConfirmation])\n    const handlerCloseConfirmation = () => setConfirmation('')\n\n    const [error, setError] = useState('')\n    const erreurCb = useCallback((err, message)=>{\n        console.error(\"Erreur \", err)\n        setError({err, message})\n    }, [setError])\n    const handlerCloseErreur = () => setError('')\n\n    useEffect(()=>{\n        console.debug(\"Section afficher : %O\", sectionAfficher)\n\n        if(sectionAfficher) {\n            // OK\n        } else {\n            // On attend d'avoir une section a afficher pour l'usager\n            return  \n        }\n        // Switch les div splash/root de public.html\n        // N'a pas d'effet si connexion perdue/recuperee\n        const splash = document.getElementById('splash'),\n        root = document.getElementById('root')\n\n        splash.className = 'splash hide'\n        root.className = 'root'\n    }, [sectionAfficher])\n\n    const menu = (\n        <MenuApp \n            i18n={i18n} \n            setSectionAfficher={setSectionAfficher} />\n    ) \n\n    return (\n        <Suspense fallback={<Attente2 />}>\n            <LayoutMillegrilles menu={menu}>\n\n                <Alert variant=\"success\" show={confirmation?true:false} onClose={handlerCloseConfirmation} dismissible>\n                    <Alert.Heading showButton>Confirmation</Alert.Heading>\n                    <p>{confirmation}</p>\n                </Alert>\n\n                <Container className=\"contenu\">\n\n                    <Contenu \n                        confirmationCb={confirmationCb}\n                        erreurCb={erreurCb}\n                        sectionAfficher={sectionAfficher}\n                        setSectionAfficher={setSectionAfficher}\n                    />\n\n                </Container>\n\n                <ModalAttente show={attente} setAttente={setAttente} />\n                <ModalErreur show={!!error} err={error.err} message={error.message} titre={t('Erreur.titre')} fermer={handlerCloseErreur} />\n\n            </LayoutMillegrilles>\n        </Suspense>\n    )\n}\n\nfunction Attente(props) {\n    const { err } = props\n\n    return (\n        <div>\n            <div className=\"navinit\">\n                <nav>\n                    <span>MilleGrilles</span>\n                </nav>\n            </div>\n    \n            <p className=\"titleinit\">Preparation de la MilleGrille</p>\n            <p>Veuillez patienter durant le chargement de la page.</p>\n            <ol>\n                <li>Initialisation</li>\n                <li>Chargement des composants dynamiques</li>\n                <li>Connexion a la page</li>\n            </ol>\n\n            <AlertErreurInitialisation err={err} />\n        </div>\n    )\n}\n\nfunction Attente2(_props) {\n    const etatConnexion = useEtatConnexion()\n\n    return (\n        <div>\n            <div className=\"navinit\">\n                <nav>\n                    <span>MilleGrilles</span>\n                </nav>\n            </div>\n    \n            <p className=\"titleinit\">Preparation de la MilleGrille</p>\n\n            <p>Veuillez patienter durant le chargement de la page.</p>\n\n            <ol>\n                <li>Initialisation</li>\n                <li>Chargement des composants dynamiques</li>\n                <li>Connexion a la page</li>\n                {etatConnexion?<li>Connecte</li>:''}\n            </ol>\n\n        </div>\n    )\n}\n\nfunction AlertErreurInitialisation(props) {\n    const { err } = props\n\n    return (\n        <Alert variant=\"warning\" show={err?true:false}>\n            <Alert.Heading>Erreur de connexion</Alert.Heading>\n            <p>\n                La connexion au serveur a echoue. L'erreur est temporaire, veuillez ressayer plus tard.\n            </p>\n            <h4>Detail</h4>\n            {err.message?<p>{err.message}</p>:''}\n            <pre>{''+err.err}</pre>\n        </Alert>\n    )\n}\n\nfunction Contenu(props) {\n    const { sectionAfficher, setSectionAfficher, confirmationCb, erreurCb } = props\n\n    const workers = useWorkers()\n    const etatPret = useEtatPret(),\n          etatSessionActive = useEtatSessionActive()[0],\n          [usagerDb, setUsagerDb] = useUsagerDb()\n    const usagerSocketIo = useUsagerSocketIo()[0]\n\n    const handleFermerSection = useCallback(()=>setSectionAfficher(''), [setSectionAfficher])\n\n    // Fermer le splash screen\n    useEffect(()=>{\n        if(etatSessionActive !== null && !sectionAfficher) setSectionAfficher(true)\n    }, [etatSessionActive, sectionAfficher])\n\n    // Charger usager si la session est detectee via socket.io\n    useEffect(()=>{\n        if(etatSessionActive === true) {\n            // S'assurer de charger l'information DB\n            if(!usagerDb && usagerSocketIo) {\n                console.debug(\"Usager socket io %O\", usagerSocketIo)\n                const nomUsager = usagerSocketIo.nomUsager\n                workers.usagerDao.getUsager(nomUsager)\n                    .then(usager=>{\n                        console.debug(\"Usager DB charge : %O\", usager)\n                        setUsagerDb(usager)\n                    })\n                    .catch(err=>console.error(\"Contenu usagerDao.getUsager Erreur chargement %s : %O\", nomUsager, err))\n            }\n        }\n    }, [workers, etatSessionActive, usagerDb, setUsagerDb, usagerSocketIo])\n\n    // Selection de la page a afficher\n    const Page = useMemo(()=>{\n        if(etatPret) {\n            switch(sectionAfficher) {\n                case 'SectionActiverDelegation': return SectionActiverDelegation\n                case 'SectionActiverCompte': return SectionActiverCompte\n                case 'SectionAjouterMethode': return SectionAjouterMethode\n                default: \n                    setSectionAfficher('Accueil')  // Desactive splash/loading screen\n                    return Accueil\n\n            }\n        }\n        if(etatSessionActive === false) {\n            // On a recu confirmation via socket.io que la session n'est pas active\n            return PreAuthentifier\n        }\n        // L'information n'est pas encore complement disponible (e.g. socket.io pas connecte)\n        return Attente2\n    }, [sectionAfficher, etatSessionActive, etatPret])\n  \n    return (\n        <Page\n            fermer={handleFermerSection} \n            confirmationCb={confirmationCb}\n            erreurCb={erreurCb} />\n    )\n}\n","import { wrap, releaseProxy } from 'comlink'\n\nimport { usagerDao } from '@dugrema/millegrilles.reactjs'\n\nlet _block = false\n\nexport function setupWorkers() {\n    //if(_block) throw new Error(\"double init\")\n    //_block = true\n\n    // Chiffrage et x509 sont combines, reduit taille de l'application\n    const connexion = wrapWorker(new Worker(new URL('./connexion.worker', import.meta.url), {type: 'module'}))\n  \n    const workerInstances = { connexion }\n  \n    const workers = Object.keys(workerInstances).reduce((acc, item)=>{\n        acc[item] = workerInstances[item].proxy\n        return acc\n      }, {})\n\n    // Pseudo-worker\n    workers.usagerDao = usagerDao                   // IDB usager\n\n    // Wiring\n    console.info(\"WIRE WORKERS start\")\n    const ready = wireWorkers(workers)\n    console.info(\"WIRE WORKERS OK\")\n\n    return { workerInstances, workers, ready }\n}\n\nasync function wireWorkers(workers) {\n    const { connexion } = workers\n    \n    const location = new URL(window.location)\n    location.pathname = '/fiche.json'\n    // console.debug(\"Charger fiche \", location.href)\n  \n    const axiosImport = await import('axios')\n    const axios = axiosImport.default\n    const reponse = await axios.get(location.href)\n\n    try {\n        const fiche = reponse.data || {}\n        const contenuFiche = JSON.parse(fiche.contenu)\n        console.debug(\"wireWorkers avec fiche \", contenuFiche)\n        const ca = contenuFiche.ca\n        if(ca) {\n            console.debug(\"initialiserCertificateStore (connexion, chiffrage)\")\n            await connexion.initialiserCertificateStore(ca, {isPEM: true, DEBUG: false})\n        }\n    } catch(err) {\n        console.error(\"wireWorkers Erreur chargement fiche \", err)\n        throw err\n    }\n}\n\nfunction wrapWorker(worker) {\n    const proxy = wrap(worker)\n    return {proxy, worker}\n}\n\nexport function cleanupWorkers(workers) {\n    console.info(\"Cleanup workers\")\n    Object.values(workers).forEach((workerInstance) => {\n        try {\n            const {worker, proxy} = workerInstance\n            try {\n                const resultat = proxy.disconnectCleanup()\n                    .then(()=>{\n                        console.debug(\"CleanupWorkers disconnect cleanup result : %O\", resultat)\n                    })\n                    .catch(err=>console.warn(\"Disconnect cleanup error : %O\", err))\n            } catch(err) {\n                console.warning(\"cleanupWorkers Erreur \", err)\n            }\n            proxy[releaseProxy]()\n            worker.terminate()\n        } catch(err) {\n            console.warn(\"Errreur fermeture worker : %O\\n(Workers: %O)\", err, workers)\n        }\n    })\n}\n","import React, { createContext, useContext, useState, useMemo, useEffect, useCallback } from 'react'\nimport { setupWorkers, cleanupWorkers } from './workers/workerLoader'\nimport { usagerDao, forgecommon } from '@dugrema/millegrilles.reactjs'\nimport { pki } from '@dugrema/node-forge'\n\nconst CONST_INTERVAL_VERIF_SESSION = 600_000\n\nconst Context = createContext()\n\n// Hooks\nfunction useWorkers() {\n    return useContext(Context).workers\n}\nexport default useWorkers\n\n/** \n * Usager tel que recu via la requete /auth/get_usager\n * {\n *  auth: bool, \n *  authentication_challenge: {...},\n * \n *  // Si disponible (optionnel)\n *  certificat: [chaine pems],\n * \n *  // Si authentifie === true\n *  userId, \n *  delegations_date: int,\n *  delegations_version: int,\n *  methodesDisponibles: {certificat: bool},\n * }\n * @return [value, setter]\n */\nexport function useUsagerWebAuth() {\n    const context = useContext(Context)\n    return [context.usagerWebAuth, context.setUsagerWebAuth]\n}\n\n/**\n * Copie de l'usager selectionne tel que charge de la base de donnees IDB.\n * {\n *   nomUsager: str,\n *   requete: str optionnel,\n *   fingerprintPk: str optionnel,\n *   certificat: list str optionnel (PEM),\n *   clePriveePem: str (PEM),\n *   delegations_version: int optionnel,\n *   delegations_date: int optionnel (epoch secs)\n * }\n * @returns [value, setter]\n */\nexport function useUsagerDb() {\n    const context = useContext(Context)\n    return [context.usagerDb, context.setUsagerDb]\n}\n\n/**\n * Information de l'usager authentifie via socket.io (apres upgrade).\n * @returns dict\n */\nexport function useUsagerSocketIo() {\n    const context = useContext(Context)\n    return [context.usagerSocketIo, context.setUsagerSocketIo]\n}\n\n/**\n * Retourne true si _socket.connected === true\n * @returns bool\n */\nexport function useEtatConnexion() {\n    return useContext(Context).etatConnexion\n}\n\n/**\n * Retourne true si le formatteur est initialise avec le certificat de l'usager\n * @returns bool\n */\nexport function useFormatteurPret() {\n    return useContext(Context).formatteurPret\n}\n\n/**\n * Valeur reponse.auth recue via /auth/get_usager ou /auth/authentifier_usager.\n * @returns bool\n */\nexport function useEtatAuthentifie() {\n    return useContext(Context).etatAuthentifie\n}\n\n/**\n * Valeur composite, indique que l'usager est authentifie et que les composants back-end sont prets.\n * Note : n'indique plus que la connexion socket.io est active. Utiliser useEtatConnexion().\n * @returns bool\n */\nexport function useEtatPret() {\n    return useContext(Context).etatPret\n}\n\n/**\n * Retourne true si la session webauth est consideree comme valide.\n * Va etre reverifiee regulierement via /auth/verifier_usager.\n * @returns [value, setter]\n */\nexport function useEtatSessionActive() {\n    const context = useContext(Context)\n    return [context.etatSessionActive, context.setEtatSessionActive]\n}\n\n// Provider\nexport function WorkerProvider(props) {\n\n    const { setErr } = props\n\n    const [workerParams, setWorkerParams] = useState('')\n\n    const [workersPrets, setWorkersPrets] = useState(false)\n    // const [usager, setUsager] = useState('')\n    const [etatConnexion, setEtatConnexion] = useState('')\n    const [formatteurPret, setFormatteurPret] = useState('')\n    // const [infoConnexion, setInfoConnexion] = useState('')\n\n    const [etatSessionActive, setEtatSessionActive] = useState(null)\n    const [usagerWebAuth, setUsagerWebAuth] = useState('')\n    const [usagerDb, setUsagerDb] = useState('')\n    const [usagerSocketIo, setUsagerSocketIo] = useState('')\n\n    useEffect(()=>{\n        console.info(\"Worker Context Setup workers\")\n        setWorkerParams(setupWorkers())\n    }, [setupWorkers])\n\n    const setUsagerSocketioCb = useCallback(usager => {\n        console.debug(\"setUsagerSocketIoCb \", usager)\n        setUsagerSocketIo(usager)\n        if(usager && usager.auth) {\n            setEtatSessionActive(true)\n        }\n    }, [setUsagerSocketIo])\n\n    const setUsagerDbCallback = useCallback(usager => {\n        if(usager.certificat) {\n            // Extraire extensions\n            try {\n                const certForge = pki.certificateFromPem(usager.certificat[0])\n                const extensions = forgecommon.extraireExtensionsMillegrille(certForge)\n                usager = {...usager, extensions, userId: extensions.userId}\n            } catch(err) {\n                console.warn(\"Erreur extraction extensions millegrilles du certificat : %O\", err)\n            }\n        }\n        setUsagerDb(usager)\n    }, [setUsagerDb])\n\n    // const { workerInstances, workers, ready } = useMemo(()=>{\n    //     console.info(\"Worker Context Setup workers\")\n    //     return setupWorkers() \n    // }, [setupWorkers])\n\n    const etatAuthentifie = useMemo(()=>{\n        const etatAuthentifie = !!usagerDb && !!etatSessionActive\n        console.debug(\"WorkerProvider.etatAuthentifie = %s (etatSessionActive: %s,usagerDb: %O)\",\n            etatAuthentifie, etatSessionActive, usagerDb)\n        return etatAuthentifie\n    }, [usagerDb, etatSessionActive])\n\n    // const etatAuthentifie = useMemo(()=>{\n    //     const etatAuthentifie = !!usager && !!etatSessionActive\n    //     console.debug(\"WorkerProvider.etatAuthentifie = %s (etatSessionActive: %s,usager: %O)\",\n    //         etatAuthentifie, etatSessionActive, usager)\n    //     return etatAuthentifie\n    // }, [usager, etatSessionActive])\n\n    const etatPret = useMemo(()=>{\n        const etatPret = formatteurPret && etatAuthentifie\n        console.debug(\"WorkerProvider.etatPret = %s (formatteurPret: %s, etatAuthentifie: %s)\",\n            etatPret, formatteurPret, etatAuthentifie)\n        return etatPret\n    }, [formatteurPret, etatAuthentifie])\n\n    // const setUsagerCb = useCallback(usager=>{\n    //     if(usager) {\n    //         if(!usager.extensions && usager.certificat) {\n    //             console.debug(\"Extraire extensions de \", usager.certificat[0])\n    //             const certForge = pki.certificateFromPem(usager.certificat[0])\n    //             const extensions = forgecommon.extraireExtensionsMillegrille(certForge)\n    //             usager = {...usager, extensions}\n    //         } else if(usager.requete) {\n    //             // Ok, mode requete certificat\n    //         } else if(!usager.extensions) {\n    //             throw new Error('Il faut fournir usager.extensions ou usager.certificat')\n    //         }\n    //         setUsager(usager)\n    //     } else {\n    //         setUsager('')\n    //     }\n    // }, [setUsager])\n\n    const value = useMemo(()=>{\n        if(workersPrets) return { \n            // usager, setUsager: setUsagerCb, infoConnexion\n            \n            usagerWebAuth, setUsagerWebAuth,\n            usagerDb, setUsagerDb: setUsagerDbCallback,\n            usagerSocketIo, setUsagerSocketIo,\n            etatSessionActive, setEtatSessionActive, \n\n            workers: workerParams.workers,\n            etatConnexion, formatteurPret, etatAuthentifie, etatPret, \n        }\n    }, [\n        workerParams, workersPrets, \n        // usager, setUsagerCb,\n\n        usagerWebAuth, setUsagerWebAuth,\n        usagerDb, setUsagerDbCallback,\n        usagerSocketIo, setUsagerSocketIo,\n        etatSessionActive, setEtatSessionActive, \n        \n        etatConnexion, formatteurPret, etatAuthentifie, etatPret, \n    ])\n\n    useEffect(()=>{\n        if(!workerParams) return\n        console.info(\"Initialiser web workers (ready : %O, workers : %O)\", workerParams.ready, workerParams)\n\n        // Initialiser workers et tables collections dans IDB\n        const promiseIdb = usagerDao.init()\n        Promise.all([promiseIdb, workerParams.ready])\n            .then(()=>{\n                console.info(\"Workers prets\")\n                setWorkersPrets(true)\n            })\n            .catch(err=>{\n                console.error(\"WorkerProvider Erreur initialisation usagers IDB / workers \", err)\n                if(err.name === 'AxiosError') {\n                    const response = err.response || {}\n                    console.debug(\"Erreur axios : \", response)\n                    setErr({ok: false, err: err, message: `Erreur durant le chargement d'information de la MilleGrille (fiche.json : ${response.status})`})\n                } else {\n                    setErr({ok: false, err})\n                }\n            })\n\n        // Cleanup\n        return () => { \n            console.info(\"Cleanup web workers\")\n            cleanupWorkers(workerParams.workerInstances) \n        }\n    }, [workerParams, setWorkersPrets, setErr])\n\n    // useEffect(()=>{\n    //     if(etatConnexion) {\n    //         // Verifier etat session\n    //         let interval = null\n    //         verifierSession()\n    //             .then(() => {\n    //                 setEtatSessionActive(true)\n    //                 interval = setInterval(verifierSession, CONST_INTERVAL_VERIF_SESSION)\n    //             })\n    //             .catch(err=>{\n    //                 setEtatSessionActive(false)\n    //                 // redirigerPortail(err)\n    //             })\n    //         return () => {\n    //             if(interval) clearInterval(interval)\n    //         }\n    //     }\n    // }, [etatConnexion, setEtatSessionActive])\n\n    useEffect(()=>{\n        if(!workerParams || !workersPrets) return\n\n        if(workerParams.workers.connexion) {\n            // setErreur('')\n            connecter(workerParams.workers, setUsagerSocketioCb, setEtatConnexion, setFormatteurPret)\n                .then(infoConnexion=>{\n                    // const statusConnexion = JSON.stringify(infoConnexion)\n                    if(infoConnexion.ok === false) {\n                        console.error(\"WorkerContext Erreur de connexion [1] : %O\", infoConnexion)\n                        // setErreur(\"Erreur de connexion au serveur : \" + infoConnexion.err); \n                        setUsagerSocketIo('')\n                        setEtatSessionActive(false)\n                    } else {\n                        console.info(\"WorkerContext Info connexion : %O\", infoConnexion)\n                        // setInfoConnexion(infoConnexion)\n                        setUsagerSocketIo(infoConnexion)\n                        setEtatSessionActive(infoConnexion.auth)\n                    }\n                })\n                .catch(err=>{\n                    // setErreur('Erreur de connexion. Detail : ' + err); \n                    console.debug(\"WorkerContext Erreur de connexion [2] : %O\", err)\n                    setUsagerSocketIo('')\n                })\n        } else {\n            // setErreur(\"Pas de worker de connexion\")\n            console.error(\"WorkerContext Pas de worker de connexion\")\n            setUsagerSocketIo('')\n        }\n    }, [ workerParams, workersPrets, setUsagerSocketIo, setEtatConnexion, setFormatteurPret,setEtatSessionActive ])\n\n    useEffect(()=>{\n        if(etatAuthentifie) {\n          // Preload certificat maitre des cles\n          workerParams.workers.connexion.getCertificatsMaitredescles()\n            .catch(err=>console.error(\"Erreur preload certificat maitre des cles : %O\", err))\n        }\n    }, [workerParams, etatAuthentifie])\n  \n    if(!workersPrets) return (\n        <Context.Provider value={value}>{props.attente}</Context.Provider>\n    )\n\n    return <Context.Provider value={value}>{props.children}</Context.Provider>\n}\n\n// export function WorkerContext(props) {\n//     return <Context.Consumer>{props.children}</Context.Consumer>\n// }\n\nasync function connecter(workers, setUsager, setEtatConnexion, setFormatteurPret) {\n    const { connecter: connecterWorker } = await import('./workers/connecter')\n    return connecterWorker(workers, setUsager, setEtatConnexion, setFormatteurPret)\n}\n\nasync function verifierSession() {\n    try {\n        const importAxios = await import('axios')\n        const reponse = await importAxios.default.get('/auth/verifier_usager')\n        // console.debug(\"Reponse verifier session sur connexion : \", reponse)\n        // const reponseCollections = await importAxios.default.get('/millegrilles/initSession')\n        console.debug(\"Reponse verifier session sur collections : \", reponse)\n        return true\n    } catch(err) {\n        return redirigerPortail(err)\n    }\n}\n\nfunction redirigerPortail(err) {\n    const reponse = err.response || {}\n    const status = reponse.status\n    if(status === 401) return false\n\n    console.error(\"Erreur verification session : \", err)\n    throw err\n}"],"names":["i18n","Backend","use","LanguageDetector","initReactI18next","init","fallbackLng","backend","loadPath","interpolation","escapeValue","format","value","lng","Date","moment","locale","isNaN","Number","toFixed","initI18n","MenuApp","lazy","PreAuthentifier","Accueil","SectionActiverDelegation","SectionActiverCompte","SectionAjouterMethode","useState","erreurInit","setErreurInit","useEffect","document","getElementById","className","setErr","attente","Attente","err","ErrorBoundary","errorCb","Suspense","fallback","Attente2","AppTop","_props","useTranslation","t","sectionAfficher","setSectionAfficher","setAttente","confirmation","setConfirmation","confirmationCb","useCallback","message","console","debug","error","setError","erreurCb","splash","root","menu","LayoutMillegrilles","Alert","variant","show","onClose","dismissible","Heading","showButton","Container","Contenu","ModalAttente","ModalErreur","titre","fermer","props","AlertErreurInitialisation","etatConnexion","useEtatConnexion","workers","useWorkers","etatPret","useEtatPret","etatSessionActive","useEtatSessionActive","useUsagerDb","usagerDb","setUsagerDb","usagerSocketIo","useUsagerSocketIo","handleFermerSection","nomUsager","usagerDao","getUsager","then","usager","catch","Page","useMemo","setupWorkers","worker","workerInstances","connexion","Worker","URL","type","proxy","wrap","Object","keys","reduce","acc","item","info","ready","wireWorkers","location","window","pathname","axiosImport","axios","default","get","href","reponse","fiche","data","contenuFiche","JSON","parse","contenu","ca","initialiserCertificateStore","isPEM","DEBUG","Context","createContext","useContext","useUsagerWebAuth","context","usagerWebAuth","setUsagerWebAuth","setUsagerSocketIo","useFormatteurPret","formatteurPret","setEtatSessionActive","WorkerProvider","workerParams","setWorkerParams","workersPrets","setWorkersPrets","setEtatConnexion","setFormatteurPret","setUsagerSocketioCb","auth","setUsagerDbCallback","certificat","certForge","pki","certificateFromPem","extensions","forgecommon","userId","warn","etatAuthentifie","promiseIdb","Promise","all","name","response","ok","status","values","forEach","workerInstance","resultat","disconnectCleanup","warning","releaseProxy","terminate","connecter","infoConnexion","getCertificatsMaitredescles","Provider","children","setUsager","connecterWorker"],"sourceRoot":""}