{"version":3,"file":"static/js/682.91dfbb69.chunk.js","mappings":"gQAEMA,EAAgB,0BAEf,SAAeC,EAAU,EAAD,sCA8B9B,8CA9BM,WAAyBC,EAASC,EAAgBC,EAAkBC,GAAwB,oFAU7B,OAT1DC,EAAcJ,EAAdI,WAGFC,EAAW,IAAIC,IAAIC,OAAOF,SAASG,OAChCC,SAAWX,EAGdY,GAAcC,EAAAA,EAAAA,KAAO,SAAAC,GAAM,OAAIC,EAAUb,EAASY,EAAQX,EAAe,IACzEa,GAAqBH,EAAAA,EAAAA,IAAMT,GAC3Ba,GAA6BJ,EAAAA,EAAAA,IAAMR,GAAyB,SAC5DC,EAAUY,aAAaF,EAAoBJ,EAAaK,GAA2B,OAiB5C,OAA7CE,QAAQC,KAAK,iBAAkBb,EAASG,MAAK,kBACtCJ,EAAUL,UAAUM,EAASG,KAAM,CAACW,OAAO,KAAM,6CAC3D,+BAEcN,EAAU,EAAD,mDAyCvB,OAzCuB,0BAAxB,WAAyBb,EAASoB,EAAWnB,EAAgBoB,GAAI,wGAM7D,OALAA,EAAOA,GAAQ,CAAC,EAEhBJ,QAAQK,MAAM,kCAAmCF,EAAWC,GAG5D,SACMpB,EAAe,IAAG,uBAGiB,wCAAuC,OAAlD,OAAkD,SAAxEsB,EAAS,EAATA,UAAWC,EAAW,EAAXA,YAAW,UACR,6CAA6B,QACd,OADc,SAA3CC,EAAG,EAAHA,IACAC,EAAkCF,EAAlCE,8BAA6B,UAChBH,EAAUI,UAAUP,GAAU,QACV,GADnCR,EAAM,OACZK,QAAQK,MAAM,mBAAoBV,IAE/BA,IAAUA,EAAOgB,WAAU,iBAM1B,OALQxB,EAAcJ,EAAdI,UACFyB,EAAYjB,EAAOgB,WAEnBE,EAAgBD,EAAUE,KAAK,IAErC,UACM3B,EAAU4B,6BAA6BF,EAAelB,EAAOqB,aAAc,CAACd,OAAO,IAAO,QAO3B,OAL/De,EAAYT,EAAIU,mBAAmBN,EAAU,IAC7CO,EAAaV,EAA8BQ,GAC3CG,EAASD,EAAWC,OAG1BpB,QAAQK,MAAM,gCAAiCF,EAAWgB,GAAW,UACnCpC,EAAQI,UAAUkC,aAAa,KAAM,CAACC,YAAY,IAAM,QAGd,OAHtEC,EAAmB,OACzBvB,QAAQK,MAAM,sCAAuCkB,GAEpCC,EAAgED,EAAzEE,QAAyEF,EAA1DG,iBAA0DH,EAAxCI,oBAAwCJ,EAAnBZ,WAAmBY,EAAPK,GAAE,UAEtE5C,GAAe,kBAAIW,GAAM,IAAEyB,OAAAA,EAAQjB,UAAAA,EAAWgB,WAAAA,EAAYK,KAAAA,KAA6E,gCAE7IxB,QAAQ6B,KAAK,uCAAwClC,GAAO,6CAGnE,sB","sources":["workers/connecter.js"],"sourcesContent":["import { proxy } from 'comlink'\n\nconst CONST_APP_URL = '/millegrilles/socket.io'\n\nexport async function connecter(workers, setUsagerState, setEtatConnexion, setEtatFormatteurMessage) {\n    const { connexion } = workers\n  \n    // console.debug(\"Set callbacks connexion worker\")\n    const location = new URL(window.location.href)\n    location.pathname = CONST_APP_URL\n\n    // Preparer callbacks\n    const setUsagerCb = proxy( usager => setUsager(workers, usager, setUsagerState) )\n    const setEtatConnexionCb = proxy(setEtatConnexion)\n    const setEtatFormatteurMessageCb = proxy(setEtatFormatteurMessage)\n    await connexion.setCallbacks(setEtatConnexionCb, setUsagerCb, setEtatFormatteurMessageCb)\n\n    // try {\n    //     const axiosImport = await import('axios')\n    //     const axios = axiosImport.default\n    //     await axios.get('/auth/verifier_usager')\n    // } catch(err) {\n    //     const response = err.response || {}\n    //     if(response.status === 401) {\n    //         // Ok, session n'est pas active\n    //         console.debug(\"Session n'est pas active\")\n    //     } else {\n    //         console.error(\"Erreur init session : %O\", err)\n    //         throw new Error(err)\n    //     }\n    // }\n\n    console.info(\"Connecter a %O\", location.href)\n    return connexion.connecter(location.href, {DEBUG: true})\n}\n\nasync function setUsager(workers, nomUsager, setUsagerState, opts) {\n    opts = opts || {}\n\n    console.debug(\"setUsager nomUsager %O, opts %O\", nomUsager, opts)\n\n    // Desactiver usager si deja connecte - permet de reauthentifier \n    // (i.e. useEtatPret === false tant que socket serveur pas pret)\n    await setUsagerState('')\n\n    // console.debug(\"setUsager '%s'\", nomUsager)\n    const { usagerDao, forgecommon } = await import('@dugrema/millegrilles.reactjs')\n    const { pki } = await import('@dugrema/node-forge')\n    const { extraireExtensionsMillegrille } = forgecommon\n    const usager = await usagerDao.getUsager(nomUsager)\n    console.debug(\"Usager info : %O\", usager)\n    \n    if(usager && usager.certificat) {\n        const { connexion } = workers\n        const fullchain = usager.certificat\n\n        const certificatPem = fullchain.join('')\n\n        // Init cles privees\n        await connexion.initialiserFormatteurMessage(certificatPem, usager.clePriveePem, {DEBUG: false})\n    \n        const certForge = pki.certificateFromPem(fullchain[0])\n        const extensions = extraireExtensionsMillegrille(certForge)\n        const userId = extensions.userId\n\n        // Authentifier\n        console.debug(\"setUsager Authentifier %s, %O\", nomUsager, extensions)\n        const reponseAuthentifier = await workers.connexion.authentifier(null, {noCallback: true})\n        console.debug(\"setUsager Reponse authentifier : %O\", reponseAuthentifier)\n\n        const { protege: auth, delegations_date, delegations_version, certificat, ca } = reponseAuthentifier\n\n        await setUsagerState({...usager, userId, nomUsager, extensions, auth, /*updates: {delegations_date, delegations_version, certificat, ca}*/ })\n    } else {\n        console.warn(\"Pas de certificat pour l'usager '%s'\", usager)\n    }\n\n}\n"],"names":["CONST_APP_URL","connecter","workers","setUsagerState","setEtatConnexion","setEtatFormatteurMessage","connexion","location","URL","window","href","pathname","setUsagerCb","proxy","usager","setUsager","setEtatConnexionCb","setEtatFormatteurMessageCb","setCallbacks","console","info","DEBUG","nomUsager","opts","debug","usagerDao","forgecommon","pki","extraireExtensionsMillegrille","getUsager","certificat","fullchain","certificatPem","join","initialiserFormatteurMessage","clePriveePem","certForge","certificateFromPem","extensions","userId","authentifier","noCallback","reponseAuthentifier","auth","protege","delegations_date","delegations_version","ca","warn"],"sourceRoot":""}