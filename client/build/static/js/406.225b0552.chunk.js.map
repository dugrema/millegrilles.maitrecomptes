{"version":3,"file":"static/js/406.225b0552.chunk.js","mappings":"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","sources":["../../../../git/millegrilles.reactjs/node_modules/@dugrema/millegrilles.utiljs/src/constantes.js","../../../../git/millegrilles.reactjs/node_modules/@dugrema/millegrilles.utiljs/src/forgecommon.js","../../../../git/millegrilles.reactjs/node_modules/base64url/dist/base64url.js","../../../../git/millegrilles.reactjs/node_modules/base64url/dist/pad-string.js","../../../../git/millegrilles.reactjs/node_modules/base64url/index.js","../../../../git/millegrilles.reactjs/node_modules/multibase/src/index.js","../../../../git/millegrilles.reactjs/node_modules/multiformats/esm/src/bases/base64.js"],"sourcesContent":["const MIMETYPE_EXT_MAP = require('../res/mimetype_ext.json')\nconst EXT_MIMETYPE_MAP = require('../res/ext_mimetype.json')\n\nconst CONST_COMMANDE_AUTH = 0x1,        // Authentification\n      CONST_COMMANDE_SIGNER_CSR = 0x2   // Demande de signature d'un CSR\n\nfunction getMimetypeExtMap() {\n    return MIMETYPE_EXT_MAP\n}\n\nfunction getExtMimetypeMap() {\n    return EXT_MIMETYPE_MAP\n}\n\nconst KIND_DOCUMENT = 0,\n      KIND_REQUETE = 1,\n      KIND_COMMANDE = 2,\n      KIND_TRANSACTION = 3,\n      KIND_REPONSE = 4,\n      KIND_EVENEMENT = 5,\n      KIND_REPONSE_CHIFFREE = 6,\n      KIND_TRANSACTION_MIGREE = 7,\n      KIND_COMMANDE_INTER_MILLEGRILLE = 8\n\nconst MESSAGE_KINDS = {\n  KIND_DOCUMENT,\n  KIND_REQUETE,\n  KIND_COMMANDE,\n  KIND_TRANSACTION,\n  KIND_REPONSE,\n  KIND_EVENEMENT,\n  KIND_REPONSE_CHIFFREE,\n  KIND_TRANSACTION_MIGREE,\n  KIND_COMMANDE_INTER_MILLEGRILLE,\n}\n\nconst MESSAGEE_KINDS_ROUTAGE = [KIND_REQUETE, KIND_COMMANDE, KIND_TRANSACTION, KIND_EVENEMENT]\n\nmodule.exports = {\n  CONST_COMMANDE_AUTH, CONST_COMMANDE_SIGNER_CSR,\n  getMimetypeExtMap, getExtMimetypeMap,\n  KIND_DOCUMENT, KIND_REQUETE, KIND_COMMANDE, KIND_TRANSACTION, KIND_REPONSE, KIND_EVENEMENT, KIND_REPONSE_CHIFFREE,\n  MESSAGE_KINDS, MESSAGEE_KINDS_ROUTAGE,\n}\n","const debug = require('debug')('millegrilles:forgecommon')\n\nconst { pki } = require('@dugrema/node-forge')\nconst stringify = require('json-stable-stringify')\n\nconst {hacher} = require('./hachage')\nconst {verifierIdmg, getIdmg} = require('./idmg')\nconst { getRandom } = require('./random')\n\n// const debug = debugLib('millegrilles:forgecommon')\n// const { pki } = nodeforge\n\nconst BEGIN_PUBLIC_KEY  = \"-----BEGIN PUBLIC KEY-----\",\n      END_PUBLIC_KEY    = \"-----END PUBLIC KEY-----\",\n      BEGIN_PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----\",\n      END_PRIVATE_KEY   = \"-----END PRIVATE KEY-----\",\n      BEGIN_CERTIFICATE = \"-----BEGIN CERTIFICATE-----\",\n      VERSION_IDMG      = 1\n\n\nfunction chiffrerPrivateKey(privateKey, motDePasse) {\n  var pem = pki.encryptRsaPrivateKey(privateKey, motDePasse);\n  return pem\n}\n\nfunction sauvegarderPrivateKeyToPEM(privateKey) {\n  // Exporte une cle privee Forge en format PKCS8 pour importer dans subtle\n\n  var rsaPrivateKey = pki.privateKeyToAsn1(privateKey);\n  // wrap an RSAPrivateKey ASN.1 object in a PKCS#8 ASN.1 PrivateKeyInfo\n  var privateKeyInfo = pki.wrapRsaPrivateKey(rsaPrivateKey);\n  // convert a PKCS#8 ASN.1 PrivateKeyInfo to PEM\n  var pem = pki.privateKeyInfoToPem(privateKeyInfo);\n  return pem\n}\n\nfunction chiffrerPrivateKeyPEM(privateKeyPEM, motDePasse) {\n\n  const privateKey = pki.privateKeyFromPem(privateKeyPEM);\n  var pem = pki.encryptRsaPrivateKey(privateKey, motDePasse);\n  // console.debug(pem);\n\n  return pem\n}\n\nfunction enveloppePEMPublique(clePubliqueStr) {\n  return [BEGIN_PUBLIC_KEY, clePubliqueStr, END_PUBLIC_KEY].join('\\n')\n}\n\nfunction enveloppePEMPrivee(clePriveeStr) {\n  return [BEGIN_PRIVATE_KEY, clePriveeStr, END_PRIVATE_KEY].join('\\n')\n}\n\nfunction splitPEMCerts(certs) {\n  var splitCerts = certs.split(BEGIN_CERTIFICATE).map(c=>{\n    return (BEGIN_CERTIFICATE + c).trim()\n  })\n  return splitCerts.slice(1)\n}\n\nclass CertificateStore {\n\n  constructor(caCert, opts) {\n    if(!opts) opts = {}\n\n    this.DEBUG = opts.DEBUG\n\n    let parsedCA;\n    if(opts.isPEM || typeof(caCert) === 'string') {\n      parsedCA = pki.certificateFromPem(caCert)\n    } else {\n      parsedCA = caCert\n    }\n\n    if(this.DEBUG) console.debug(\"Certificat de millegrille (CA) charge : %O\", parsedCA)\n\n    this.caStore = pki.createCaStore([parsedCA])\n    this.cert = parsedCA\n  }\n\n\n  verifierChaine(chainePEM, opts) {\n    // opts:\n    //   - validityCheckDate : new Date() object ou null pour aucune verification de date\n    if(!opts) opts = {}\n\n    // Charger PEMs vers format forge\n    const chaineCerts = chainePEM.map(item=>{\n      if(typeof(item) !== 'string') return item\n      return pki.certificateFromPem(item)\n    })\n\n    if(this.DEBUG && opts.validityCheckDate) console.debug(\"Date validation certificats %s\", opts.validityCheckDate)\n\n    let valide = true;\n    try {\n      pki.verifyCertificateChain(this.caStore, chaineCerts, opts)\n    } catch (err) {\n      valide = false;\n      if(this.DEBUG) console.debug('Certificate verification failure: %s', JSON.stringify(err, null, 2))\n    }\n\n    if(valide === true) {\n      // Retourner certificat\n      const cert = chaineCerts.shift()\n      cert.chain = chaineCerts\n      return cert\n    }\n\n    return false\n  }\n\n}\n\nfunction matchCertificatKey(certificatPEM, keyPEM) {\n  const cert = pki.certificateFromPem(certificatPEM)\n  const key = pki.privateKeyFromPem(keyPEM)\n\n  // console.debug(\"Cert, cle\")\n  // console.debug(cert.publicKey.n)\n  // console.debug(key.n)\n\n  const cleCertMatch = cert.publicKey.n.compareTo(key.n) === 0\n  // console.debug(\"Match : %s\", cleCertMatch)\n\n  return cleCertMatch\n}\n\nfunction genererRandomSerial() {\n  const rndBuffer = getRandom(8)  // 64 bit\n  const nombre = new BigUint64Array(rndBuffer.buffer)[0]  // Convertir en view 64bit unsigned\n  const serial = '' + nombre\n  // const serial = '' + Math.floor(Math.random() * 10000000000000000000)\n  if(serial.length < 2) {\n    serial = '0' + serial\n  }\n  return serial\n}\n\nfunction chargerClePrivee(clePriveePEM, opts) {\n  opts = opts || {}\n\n  // console.debug(\"Charger cle privee (password: %O): %O\", opts.password, clePriveePEM)\n\n  if(opts.password) {\n    return pki.decryptRsaPrivateKey(clePriveePEM, opts.password)\n  } else {\n    return pki.privateKeyFromPem(clePriveePEM)\n  }\n}\n\nasync function validerChaineCertificats(chainePEM, opts) {\n  debug(\"validerChaineCertificats chainePEM : %O, opts: %O\", chainePEM, opts)\n  if(typeof(chainePEM) === 'string') {\n    chainePEM = splitPEMCerts(chainePEM)\n  }\n\n  if(chainePEM.length > 3) {\n    throw new Error(\"Chaine de certificat > 3, le cross-signing n'est pas supporte pour l'authentification web\")\n  }\n  if(!opts) opts = {}\n\n  // Calculer idmg\n  const certCa = opts.ca || opts.certCa  //  chainePEM[chainePEM.length-1]\n  if(!certCa) throw new Error(\"forgecommon Chaine incomplete, il manque le CA : \" + chainePEM)\n  const certCaForge = pki.certificateFromPem(certCa)\n\n  // Verifier chaine de certificats du client\n  const clientStore = opts.clientStore || new CertificateStore(certCa, {isPEM: true})\n  const chaineOk = clientStore.verifierChaine(chainePEM)\n\n  if(!chaineOk) throw new Error(\"forgecommon Chaine de certificats invalide\")\n\n  const certClient = pki.certificateFromPem(chainePEM[0])\n\n  // S'assurer que le certificat client correspond au IDMG (O=IDMG)\n  const idmgExtrait = await getIdmg(chainePEM)  // certClient.subject.getField('O').value\n\n  var idmg = opts.idmg\n  if(idmg && idmgExtrait !== idmg) {\n    throw new Error(\"forgecommonCertificat (O=\" + idmgExtrait + \") ne corespond pas au IDMG \" + opts.idmg)\n  } else {\n    verifierIdmg(idmgExtrait, certCa)\n    // Aucune erreur lancee, le IDMG est valide\n    idmg = idmgExtrait\n  }\n\n  // Prendre le IDMG du issuer comme reference\n  const idmgIssuer = certClient.issuer.getField('O').value\n  if(idmgIssuer !== idmg) {\n    throw new Error(\"forgecommon Certificat intermediaire (O=\" + idmgIssuer + \") ne corespond pas au IDMG calcule \" + idmg)\n  }\n\n  return {cert: certClient, idmg: idmgIssuer, idmgCa: idmg, clientStore}\n}\n\nfunction verifierChallengeCertificat(certClient, messageSigne) {\n  // Verifier la signature du message\n  const signature = messageSigne['_signature']\n  if(!signature) throw new Error(\"forgecommon Signature introuvable\")\n\n  const copieMessage = {...messageSigne}\n  delete copieMessage['_signature']\n  delete copieMessage['_signatures']\n  const stableJsonStr = stringify(copieMessage)\n  const signatureOk = verifierSignatureString(certClient.publicKey, stableJsonStr, signature)\n\n  return signatureOk\n}\n\nfunction extraireExtensionsMillegrille(certificatForge) {\n\n  if(typeof(certificatForge) === 'string') {\n    certificatForge = pki.certificateFromPem(certificatForge)\n  }\n\n  // Extraire niveaux de securite des extensions du certificat\n  var niveauxSecurite = ''\n  try {\n    const niveauxSecuriteList = certificatForge.extensions.filter(ext=>{return ext.id === '1.2.3.4.0'}).map(item=>{return item.value.split(',')})\n    niveauxSecurite = niveauxSecuriteList.reduce((array, item)=>{return [...array, ...item]}, [])\n  } catch(err) {\n    //console.error(\"Erreur lecture niveaux de securite du certificat: %O\", err)\n  }\n\n  // Extraire roles des extensions du certificat\n  var roles = ''\n  try {\n    const rolesList = certificatForge.extensions.filter(ext=>{return ext.id === '1.2.3.4.1'}).map(item=>{return item.value.split(',')})\n    roles = rolesList.reduce((array, item)=>{return [...array, ...item]}, [])\n  } catch(err) {\n    // console.debug(\"Erreur lecture roles du certificat: %O\", err)\n  }\n\n  var domaines = ''\n  try {\n    const ext = certificatForge.extensions.filter(ext=>{return ext.id === '1.2.3.4.2'})\n    if(ext && ext[0]) {\n      domaines = ext[0].value\n      if(domaines) domaines = domaines.split(',')\n    }\n  } catch(err) {\n    // console.error(\"Erreur lecture domaines du certificat: %O\", err)\n  }\n\n  // Extraire userId de certificat de navigateur\n  var userId = ''\n  try {\n    userId = certificatForge.extensions.filter(ext=>{return ext.id === '1.2.3.4.3'})[0].value\n  } catch(err) {\n    //console.error(\"Erreur lecture userId du certificat: %O\", err)\n  }\n\n  var delegationGlobale = ''\n  try {\n    const ext = certificatForge.extensions.filter(ext=>{return ext.id === '1.2.3.4.4'})\n    if(ext && ext[0]) {\n      delegationGlobale = ext[0].value\n    }\n  } catch(err) {\n    // console.error(\"Erreur lecture delegationGlobale du certificat: %O\", err)\n  }\n\n  var delegationsDomaines = ''\n  try {\n    const ext = certificatForge.extensions.filter(ext=>{return ext.id === '1.2.3.4.5'})\n    if(ext && ext[0]) {\n      delegationsDomaines = ext[0].value\n      if(delegationsDomaines) delegationsDomaines = delegationsDomaines.split(',')\n    }\n  } catch(err) {\n    //console.error(\"Erreur lecture delegationsDomaines du certificat: %O\", err)\n  }\n\n  var delegationsSousDomaines = ''\n  try {\n    const ext = certificatForge.extensions.filter(ext=>{return ext.id === '1.2.3.4.6'})\n    if(ext && ext[0]) {\n      delegationsSousDomaines = ext[0].value\n      if(delegationsSousDomaines) delegationsSousDomaines = delegationsSousDomaines.split(',')\n    }\n  } catch(err) {\n    // console.error(\"Erreur lecture delegationsSousDomaines du certificat: %O\", err)\n  }\n\n  return {roles, niveauxSecurite, userId, delegationGlobale, delegationsDomaines, delegationsSousDomaines, domaines}\n}\n\nfunction comparerArraybuffers(buf1, buf2) {\n  // https://stackoverflow.com/questions/21553528/how-to-test-for-equality-in-arraybuffer-dataview-and-typedarray\n  if (buf1.byteLength != buf2.byteLength) return false;\n    var dv1 = new Int8Array(buf1);\n    var dv2 = new Int8Array(buf2);\n    for (var i = 0 ; i != buf1.byteLength ; i++)\n    {\n        if (dv1[i] != dv2[i]) return false;\n    }\n    return true;\n}\n\nfunction hacherPem(pem, opts) {\n  opts = opts || {}\n  const hashingCode = opts.hashingCode || 'sha2-256',\n        encoding = opts.encoding || 'base64'\n\n  /* Permet d'hacher un PEM directement, e.g. cle publique. */\n  var lignes = pem.trim().split('\\n')\n  // console.debug(\"Ligne PEM : %O\", lignes)\n  lignes = lignes.slice(1, lignes.length-1)\n\n  var pemSansEnveloppe = lignes.join('')\n  console.debug(\"Pem sans enveloppe : %O\", pemSansEnveloppe)\n\n\n  var buffer = new Uint8Array(Buffer.from(pemSansEnveloppe, 'base64'))\n  console.debug(\"Buffer pem : %O\", buffer)\n\n  return hacher(buffer, {hashingCode, encoding})\n}\n\nmodule.exports = {\n  chiffrerPrivateKeyPEM, enveloppePEMPublique, enveloppePEMPrivee,\n  matchCertificatKey, CertificateStore, genererRandomSerial, splitPEMCerts,\n  chargerClePrivee, chiffrerPrivateKey,\n  validerChaineCertificats, verifierChallengeCertificat, sauvegarderPrivateKeyToPEM,\n  comparerArraybuffers, extraireExtensionsMillegrille,\n  hacherPem,\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pad_string_1 = require(\"./pad-string\");\nfunction encode(input, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    if (Buffer.isBuffer(input)) {\n        return fromBase64(input.toString(\"base64\"));\n    }\n    return fromBase64(Buffer.from(input, encoding).toString(\"base64\"));\n}\n;\nfunction decode(base64url, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    return Buffer.from(toBase64(base64url), \"base64\").toString(encoding);\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    return pad_string_1.default(base64url)\n        .replace(/\\-/g, \"+\")\n        .replace(/_/g, \"/\");\n}\nfunction fromBase64(base64) {\n    return base64\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction toBuffer(base64url) {\n    return Buffer.from(toBase64(base64url), \"base64\");\n}\nvar base64url = encode;\nbase64url.encode = encode;\nbase64url.decode = decode;\nbase64url.toBase64 = toBase64;\nbase64url.fromBase64 = fromBase64;\nbase64url.toBuffer = toBuffer;\nexports.default = base64url;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction padString(input) {\n    var segmentLength = 4;\n    var stringLength = input.length;\n    var diff = stringLength % segmentLength;\n    if (!diff) {\n        return input;\n    }\n    var position = stringLength;\n    var padLength = segmentLength - diff;\n    var paddedStringLength = stringLength + padLength;\n    var buffer = Buffer.alloc(paddedStringLength);\n    buffer.write(input);\n    while (padLength--) {\n        buffer.write(\"=\", position++);\n    }\n    return buffer.toString();\n}\nexports.default = padString;\n","module.exports = require('./dist/base64url').default;\nmodule.exports.default = module.exports;\n","/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n'use strict'\n\nconst constants = require('./constants')\nconst { encodeText, decodeText, concat } = require('./util')\n\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n  const data = encodeText(enc.encode(buf))\n\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\n  return enc.decode(data.substring(1))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(/** @type {BaseCode} */(data[0]))\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nconst names = Object.freeze(constants.names)\nconst codes = Object.freeze(constants.codes)\nexports.names = names\nexports.codes = codes\n","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});"],"names":["MIMETYPE_EXT_MAP","require","EXT_MIMETYPE_MAP","MESSAGE_KINDS","KIND_DOCUMENT","KIND_REQUETE","KIND_COMMANDE","KIND_TRANSACTION","KIND_REPONSE","KIND_EVENEMENT","KIND_REPONSE_CHIFFREE","KIND_TRANSACTION_MIGREE","KIND_COMMANDE_INTER_MILLEGRILLE","MESSAGEE_KINDS_ROUTAGE","module","exports","CONST_COMMANDE_AUTH","CONST_COMMANDE_SIGNER_CSR","getMimetypeExtMap","getExtMimetypeMap","debug","pki","stringify","hacher","verifierIdmg","getIdmg","getRandom","BEGIN_PUBLIC_KEY","END_PUBLIC_KEY","BEGIN_PRIVATE_KEY","END_PRIVATE_KEY","BEGIN_CERTIFICATE","splitPEMCerts","certs","split","map","c","trim","slice","CertificateStore","caCert","opts","parsedCA","this","DEBUG","isPEM","certificateFromPem","console","caStore","createCaStore","cert","chainePEM","chaineCerts","item","validityCheckDate","valide","verifyCertificateChain","err","JSON","shift","chain","length","Error","certCa","ca","clientStore","verifierChaine","certClient","idmgExtrait","idmg","idmgIssuer","issuer","getField","value","idmgCa","chiffrerPrivateKeyPEM","privateKeyPEM","motDePasse","privateKey","privateKeyFromPem","encryptRsaPrivateKey","enveloppePEMPublique","clePubliqueStr","join","enveloppePEMPrivee","clePriveeStr","matchCertificatKey","certificatPEM","keyPEM","key","publicKey","n","compareTo","genererRandomSerial","rndBuffer","serial","BigUint64Array","buffer","chargerClePrivee","clePriveePEM","password","decryptRsaPrivateKey","chiffrerPrivateKey","validerChaineCertificats","verifierChallengeCertificat","messageSigne","signature","copieMessage","stableJsonStr","verifierSignatureString","sauvegarderPrivateKeyToPEM","rsaPrivateKey","privateKeyToAsn1","privateKeyInfo","wrapRsaPrivateKey","privateKeyInfoToPem","comparerArraybuffers","buf1","buf2","byteLength","dv1","Int8Array","dv2","i","extraireExtensionsMillegrille","certificatForge","niveauxSecurite","niveauxSecuriteList","extensions","filter","ext","id","reduce","array","roles","rolesList","domaines","userId","delegationGlobale","delegationsDomaines","delegationsSousDomaines","hacherPem","pem","hashingCode","encoding","lignes","pemSansEnveloppe","Uint8Array","Buffer","from","pad_string_1","encode","input","isBuffer","fromBase64","toString","toBase64","base64url","default","replace","base64","decode","toBuffer","Object","defineProperty","stringLength","diff","position","padLength","paddedStringLength","alloc","write","constants","encodeText","decodeText","concat","nameOrCode","prototype","hasOwnProperty","call","names","codes","buf","name","codeBuf","enc","validEncode","data","prefix","includes","toLowerCase","substring","isEncoded","encodingFromData","freeze","rfc4648","alphabet","bitsPerChar","base64pad","base64urlpad"],"sourceRoot":""}